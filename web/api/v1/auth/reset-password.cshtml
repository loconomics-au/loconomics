@*
    Reset password: allows to request a password reset e-mail and to perform the reset by providing a valid token.

    - POST /:
        - username:string Username/email

    - POST /confirm:
        - token:string Current reset token for the user. It may expire, needs to be recent
        - password:string New password

    - return:
        {
            "message": Server message with instructions to proceed.
        }

    EXAMPLES {
        "Reset password: Request e-mail / reset token": {
            "url": "/api/v1/en-US/auth/reset-password",
            "post": {
                "username": "some user email"
            }
        },
        "Reset password: Confirm reset by providing the valid token and new password": {
            "url": "/api/v1/en-US/auth/reset-password/confirm",
            "post": {
                "token": "a-valid-reset-code-token",
                "password": "new password"
            }
        }
    }
*@
@functions{
    public class RestResetPassword : RestWebPage
    {
        public override dynamic Post()
        {
            // If success, will be 200 not 201
            WebPage.Response.StatusCode = 200;

            if (UrlData.Count == 0) {
                var username = Request["username"];
                var userID = WebSecurity.GetUserId(username);
                var token = WebSecurity.GeneratePasswordResetToken(username);
                LcMessaging.SendResetPassword(userID, username, token);
                return new
                {
                    message = String.Format("[[[Instructions to reset your password have been sent to {0}. Please check your spam folder if you don't see it.]]]", username)
                };
            }
            else if (UrlData.Count == 1 && UrlData[0] == "confirm") {
                Validation.RequireField("token", "[[[Please provide a valid reset token.]]]");
                Validation.RequireField("password", "[[[Please enter a new password.]]]");
                if (Validation.IsValid()) {
                    var token = Request["token"];
                    var pwd = Request["password"];
                    if (LcAuth.ResetPassword(token, pwd)) {
                        return new
                        {
                            message = "[[[You can now log-in with your new password]]]"
                        };
                    }
                    else {
                        throw new ConstraintException("[[[The password reset token is incorrect or may be expired]]]");
                    }
                }
                else {
                    // Bad request, input data incorrect because of validation rules
                    throw new HttpException(400, LcRessources.ValidationSummaryTitle);
                }
            } else {
                throw new HttpException(404, "Not Found");
            }
        }
    }
}
@{   
    new RestResetPassword().JsonResponse(this);
}
