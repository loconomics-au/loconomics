@using WebMatrix.WebData;
@*
    Get, Update, Upload and Delete the logged user work photos.

    Options:
    - GET /{jobTitleID}
        Gets the list of work photos for user on that jobTitle sorted by rankPosition

    - POST /{jobTitleID}
        photo:binary image/jpeg
        caption:string [Optional] Very short description of the photo.
        rankPosition:int [Optional] Position of the photo in the list, it allows user sorting.
        x:int [Optional] Horizontal coordinate for the top left corner for cropping task.
        y:int [Optional] Vertical coordinate for the top left corner for cropping task
        w:int [Optional] Width of the cropped image. Zero will just mean 'original image width'
        h:int [Optional] Height of the cropped image. Zero will just mean 'original image height'
        rotationAngle:float

    - PUT /{jobTitleID}/{photoID}
        photo:binary image/jpeg
        caption:string [Optional] Very short description of the photo.
        rankPosition:int [Optional] Position of the photo in the list, it allows user sorting.
        x:int [Optional] Horizontal coordinate for the top left corner for cropping task.
        y:int [Optional] Vertical coordinate for the top left corner for cropping task
        w:int [Optional] Width of the cropped image. Zero will just mean 'original image width'
        h:int [Optional] Height of the cropped image. Zero will just mean 'original image height'
        rotationAngle:float

    - DELETE /{jobTitleID}/{photoID}

    - @Result LcData.Photo.WorkPhoto class instance. On GET, it returns a list of them.

    EXAMPLES {
        "My Work Photos by Job Title (read and create)": {
            "url": "/api/v1/en-US/me/work-photos/106",
            "get": {},
            "post": {
                "photo": "binary image/* content",
                "caption": "This is my workshop",
                "rankPosition": 1,
                "x": 0,
                "y": 0,
                "w": 0,
                "h": 0,
                "rotationAngle": 0
            }
        },
        "My Work Photos by Job Title, upload update or delete": {
            "url": "/api/v1/en-US/me/work-photos/106/1",
            "put": {
                "photo": "binary image/* content; optional here, to allow only update associated data or crop/rotate pre-uploaded photo",
                "caption": "This is my workshop",
                "rankPosition": 1,
                "x": 0,
                "y": 0,
                "w": 0,
                "h": 0,
                "rotationAngle": 0
            },
            "delete": {}
        }
    }
*@
@functions{
    public class RestMyWorkPhotos : RestWebPage
    {
        public override dynamic Get()
        {
            if (UrlData.Count == 1 && UrlData[0].IsInt()) {
                var userID = WebSecurity.CurrentUserId;
                var jobTitleID = UrlData[0].AsInt();

                return LcData.Photo.GetUserWorkPhotos(userID, jobTitleID);
            }

            return base.Get();
        }

        public override dynamic Post()
        {
            if (UrlData.Count == 1) {
                return SetPhoto();
            }
            return base.Post();
        }

        public override dynamic Put()
        {
            if (UrlData.Count == 2)
            {
                return SetPhoto();
            }
            return base.Put();
        }

        public dynamic SetPhoto()
        {
            // Input Data
            var userID = WebSecurity.CurrentUserId;
            var jobTitleID = UrlData[0].AsInt();
            // Will be just 0 on new records, it doesn't matters
            // (and a previous UrlData.Count check prevents from receive a value on POST calls)
            var photoID = UrlData[1].AsInt(0);

            try {
                Stream photoStream = null;
                var fileuploaded = Request.Files["photo"];
                if (fileuploaded != null && !String.IsNullOrEmpty(fileuploaded.FileName))
                {
                    photoStream = fileuploaded.InputStream;
                }
                if (photoStream == null && photoID == 0)
                {
                    ModelState.AddFormError("[[[Please, include a photo]]]");
                }
                else if (photoStream != null && photoStream.Length == 0 && photoID == 0)
                {
                    // DOUBT: to check for this error, must be the photoStream or Request.InputStream.Length? Double check
                    ModelState.AddFormError("[[[Maximum request length exceeded]]]");
                }
                else
                {
                    var caption = Request["caption"];
                    var rankPosition = Request["rankPosition"].AsInt();
                    var x = (int)Math.Round(Request["x"].AsDecimal());
                    var y = (int)Math.Round(Request["y"].AsDecimal());
                    var w = (int)Math.Round(Request["w"].AsDecimal());
                    var h = (int)Math.Round(Request["h"].AsDecimal());
                    var angle = Request["rotationAngle"].AsFloat();
                    // It returns the photoID, the given or the created one
                    photoID = LcData.Photo.UploadWorkPhoto(userID, photoStream, jobTitleID, photoID, caption, rankPosition, x, y, w, h, angle);
                }
            }
            catch (Exception ex)
            {
                ModelState.AddFormError(ex.Message);
            }

            if (ModelState.IsValid) {
                return LcData.Photo.GetUserWorkPhoto(userID, jobTitleID, photoID);
            }
            else {
                var errMsg = String.Join("; ", ModelState.Values.First().Errors);

                // We don't want the ugly default asp.net message for file-size-exceeded
                // As of #454 (https://github.com/joshdanielson/Loconomics/issues/454#issuecomment-37782181)
                //TODO: fix for localisation of strings
                if (errMsg.Contains("Maximum request length exceeded"))
                {
                    //LcHelpers.DebugLogger.Log("PUT profile-picture:notvalid:max request length exceeded");
                    var max = LcHelpers.GetMaxRequestSize();
                    var printMax = "";
                    if (max > 0)
                    {
                        printMax = LcHelpers.PrettyFileSize(max * 1024);

                        errMsg = string.Format("[[[The file is too large, maximum file size is %0|||{0}]]]", printMax);
                    }
                    else
                    {
                        errMsg = "[[[The file is too large]]]";
                    }
                    throw new ValidationException(errMsg, "profilePicture");
                }

                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }
        }

        public override dynamic Delete()
        {
            if (UrlData.Count != 2)
            {
                return base.Put();
            }

            var userID = WebSecurity.CurrentUserId;
            var jobTitleID = UrlData[0].AsInt();
            var photoID = UrlData[1].AsInt();
            // Get one to be deleted:
            var record = LcData.Photo.GetUserWorkPhoto(userID, jobTitleID, photoID);

            // Remove photo file an update db
            LcData.Photo.DeleteWorkPhoto(photoID, userID, jobTitleID);
            return record;
        }
    }
}
@{   
    Response.RestRequiresUser(LcData.UserInfo.UserType.ServiceProfessional);
    new RestMyWorkPhotos().JsonResponse(this);
}
