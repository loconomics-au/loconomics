@using WebMatrix.WebData;
@*
    Gets and updates the weekly schedule of the user (it's general working hours, by week day).
    Times that finish the end of the day can be passed in as '23:59:59' or '00:00:00' (12AM next day);
    typical on full day cases.

    Options:
    
    - GET /
        @result {
            "timeZone": "America/Los_Angeles",
            "sunday": [
                {
                    "start": "09:00:00",
                    "end": "17:00:00"
                }
            ],
            "monday": [
                {
                    "start": "00:00:00",
                    "end": "23:59:59"
                }
            ],
            "tuesday": [
                {
                    "start": "00:00:00",
                    "end": "00:00:00"
                }
            ],
            "wednesday": [
                {
                    "start": "00:00:00",
                    "end": "23:59:59"
                }
            ],
            "thursday": [],
            "friday": null,
            "saturday": [
                {
                    "start": "10:00:00",
                    "end": "14:00:00"
                },
                {
                    "start": "16:30:00",
                    "end": "20:30:00"
                }
            ],
            "isAllTime": false
        }

    - PUT /

        @params Same structure than the output, but URLEncoded in Request.Form looks like (same data than previous GET example):
            timeZone=America/Los_Angeles
            sunday[0][start]=00:00:00
            sunday[0][end]=23:59:59
            monday[0][start]=00:00:00
            monday[0][end]=23:59:59
            tuesday[0][start]=00:00:00
            tuesday[0][end]=00:00:00
            wednesday[0][start]=00:00:00
            wednesday[0][end]=23:59:59
            friday=null
            saturday[0][start]=10:00:00
            saturday[0][end]=14:00:00
            saturday[1][start]=16:30:00
            saturday[1][end]=20:30:00
            isAllTime=false

        @result Updated copy from database, as in a GET request

    EXAMPLES {
        "Weekly Schedule": {
            "url": "/api/v1/en-US/me/weekly-schedule",
            "get": {},
            "put": {
                "timeZone": "America/Los_Angeles",
                "sunday": [
                    {
                        "start": "09:00:00",
                        "end": "17:00:00"
                    }
                ],
                "monday": [
                    {
                        "start": "00:00:00",
                        "end": "23:59:59"
                    }
                ],
                "tuesday": [
                    {
                        "start": "00:00:00",
                        "end": "00:00:00"
                    }
                ],
                "wednesday": [
                    {
                        "start": "00:00:00",
                        "end": "23:59:59"
                    }
                ],
                "thursday": [],
                "friday": null,
                "saturday": [
                    {
                        "start": "10:00:00",
                        "end": "14:00:00"
                    },
                    {
                        "start": "16:30:00",
                        "end": "20:30:00"
                    }
                ],
                "isAllTime": false
            }
        }
    }
*@
@functions{
    public class RestWeeklySchedule : RestWebPage
    {       
        public override dynamic Get()
        {
            if (UrlData.Count > 0) {
                throw new HttpException(404, "[[[Not Found]]]");
            }

            var userID = WebSecurity.CurrentUserId;

            return LcCalendar.GetAvailability.WeeklySchedule(userID);
        }

        public override dynamic Put()
        {
            Validation.RequireField("timeZone", LcRessources.RequiredField("Time zone"));

            if (!Validation.IsValid() || !ModelState.IsValid)
            {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }
            
            var userID = WebSecurity.CurrentUserId;
            var alltime = Request.Form["isAllTime"].AsBool(false);
            var timeZone = Request.Form["timeZone"];

            if (alltime)
            {
                LcCalendar.SetAllTimeAvailability(userID, timeZone);
            }
            else
            {
                // Read all passed week days and its array of timesRange
                //var input = new Dictionary<string, object>();
                var whdays = new List<LcCalendar.WorkHoursDay>();

                foreach (var dow in Enum.GetNames(typeof(DayOfWeek)))
                {
                    var wk = String.Format(LcCalendar.GetAvailability.systemCulture, "{0}", dow).ToLower();
                    //var list = new List<LcCalendar.GetAvailability.TimesRange>();
                    //input.Add(wk, list);
                    
                    // The number of elements in each list is unknow, so we iterate from 0 to the last
                    // one that has data; when reading a key that has no data (or invalid) on the start
                    // or end properties, the loop is done.
                    var i = 0;
                    var done = false;
                    while (!done) {
                        var key = wk + "[" + i + "]";
                        var start = TimeSpanFromISO(Request.Form[key + "[start]"]);
                        var end = TimeSpanFromISO(Request.Form[key + "[end]"]);
                        if (start.HasValue && end.HasValue) {
                            /*list.Add(new LcCalendar.GetAvailability.TimesRange
                            {
                                start = start.Value,
                                end = end.Value
                            });*/
                            whdays.Add(new LcCalendar.WorkHoursDay {
                                StartTime = start.Value,
                                EndTime = end.Value,
                                TimeZone = timeZone,
                                DayOfWeek = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), dow)
                            });
                        }
                        else {
                            done = true;
                        }
                        i++;
                    }
                }
                
                if (whdays.Count == 0) {
                    throw new HttpException(400, "[[[Your weekly schedule is required. If you are available at all times or prefer to approve appointment times, check \"all days/times\".]]]");
                }

                // Save it!
                LcCalendar.SetAllProviderWorkHours(userID, whdays);
            }

            // Everything goes fine, latest details:          
            using (var db = Database.Open("sqlloco"))
            {
                // Save selected time zone value
                db.Execute("UPDATE CalendarProviderAttributes SET timeZone=@0 WHERE UserID=@1", timeZone, userID);
                
                // Testing the alert
                db.Execute("EXEC TestAlertAvailability @0", userID);
            }
            // Updated data copy:
            return LcCalendar.GetAvailability.WeeklySchedule(userID);
        }
    }
}
@{
    Response.RestRequiresUser(LcData.UserInfo.UserType.ServiceProfessional);
    new RestWeeklySchedule().JsonResponse(this);
}
