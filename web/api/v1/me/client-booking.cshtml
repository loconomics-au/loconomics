@using WebMatrix.WebData;
@*
    Allows a client to create a booking, in other words: to book a service professional.
    There is only POST access, no editing, no fetching.
    On creation, the just created booking details are returned and later can
    be fetched using the /bookings API.

    Options:

    - GET /
        @params {
            serviceProfessionalUserID:int,
            jobTitleID:int,
            bookCode:string [Optional]
        }

        @result RestBooking. See the /bookings API for details.

    - POST /
        @params {
            TODO complete list

            serviceAddressID:int ID of the address where service will be performed (must belong to client or service professional
                and is overwrited by the value of serviceAddress[addressID] if provided.
            serviceAddress:Address Object to hold a serviceAddress[addressID] or the full details of a new
                address saved for the client to be used as the place where service will be performed.
        }

        @result RestBooking. See the /bookings API for details.

    EXAMPLES {
        "Client Booking: Create booking: Post to create booking and Get to request the initial data for a new booking": {
            "url": "/api/v1/en-US/me/client-booking",
            "get": {
                "serviceProfessionalUserID": 141,
                "jobTitleID": 106,
                "bookCode": null
            },
            "post": {
                "serviceProfessionalUserID": 141,
                "jobTitleID": 106,
                "serviceStartTime": "2015-10-19T08:30:00.000Z",
                "alternative1StartTime": "2015-10-26T09:30:00.000Z",
                "alternative2StartTime": null,
                "serviceAddress": {
                    "addressID": 240,
                    "addressName": "Service Area",
                    "addressLine1": "",
                    "postalCode": 98001,
                    "countryCode": "US",
                    "latitude": 47.3394747,
                    "longitude": -122.2667661,
                },
                "services": [8, 108],
                "promotionalCode":null,
                "billingAddress": {
                    "postalCode": 90001,
                    "paymentMethodID": "0",
                    "nameOnCard": "",
                    "cardNumber": "123456789456123",
                    "expirationMonth": "01",
                    "expirationYear": "2017",
                    "securityCode": "1565",
                    "savePayment": false
                },
                "specialRequests": "Some notes to the professional",
                "paymentMethod": {
                    "paymentMethodID": "TEST: previously saved method token",
                    "cardNumber": "123443121234",
                    "nameOnCard": "Me",
                    "expirationMonth": "11",
                    "expirationYear": "2018",
                    "securityCode": "123",
                    "savePayment": true
                }
            }
        },
        "Client Booking: Update booking": {
            "url": "/api/v1/en-US/me/client-booking/34",
            "put": {
                "serviceStartTime": "2015-10-19T08:30:00.000Z",
                "serviceAddress": {
                    "addressID": 240,
                    "addressName": "Service Area",
                    "addressLine1": "",
                    "postalCode": 98001,
                    "countryCode": "US",
                    "latitude": 47.3394747,
                    "longitude": -122.2667661,
                },
                "services": [8, 108],
                "specialRequests": "Some notes to the professional"
            }
        },
        "Client Booking: Cancel booking": {
            "url": "/api/v1/en-US/me/client-booking/34/cancel",
            "post": {}
        },
        "Client Booking: Decline/deny booking": {
            "url": "/api/v1/en-US/me/client-booking/34/deny",
            "post": {}
        }
    }
*@
@functions{
    public class RestMeClientBooking : RestWebPage
    {
        public override dynamic Get()
        {
            if (UrlData.Count > 0)
                throw new HttpException(404, "[[[Not Found]]]");

            // Query to fetch information in order to start
            // creation of a booking
            var clientID = WebSecurity.IsAuthenticated ? WebSecurity.CurrentUserId : 0;
            var serviceProfessionalID = Request["serviceProfessionalUserID"].AsInt();
            var jobTitleID = Request["jobTitleID"].AsInt();
            var bookCode = Request["bookCode"];
            var locale = LcRest.Locale.Current;
            var newBooking = LcRest.Booking.NewFor(clientID, serviceProfessionalID, jobTitleID, locale.languageID, locale.countryID, bookCode);
            if (newBooking == null)
                throw new HttpException(404, "[[[Not Found]]]");

            return newBooking;
        }

        public override dynamic Post()
        {
            this.RequiresUser(LcData.UserInfo.UserType.User);
            var userID = WebSecurity.CurrentUserId;
            if (UrlData.Count == 0) {
                var itemID = CreateItem();

                if (itemID > 0)
                {
                    return LcRest.Booking.Get(itemID, true, false, userID);
                }
                throw new HttpException(500, "[[[Something goes wrong]]]");
            }
            else if (UrlData.Count == 2) {
                var bookingID = UrlData[0].AsInt();
                // IMPORTANT: Internal use booking: (tasks may need some internal information)
                // After any task, a new fetched, public, booking record is returned
                var booking = LcRest.Booking.Get(bookingID, true, true, userID);
                if (booking == null ||
                    booking.clientUserID != userID) {
                    throw new HttpException(404, "[[[Not Found]]]");
                }
                if (UrlData[1] == "cancel")
                {
                    booking.CancelBookingByClient();
                    // fresh copy from db
                    return LcRest.Booking.Get(bookingID, true, false, userID);
                }
                else if (UrlData[1] == "deny")
                {
                    booking.DeclineBookingByClient();
                    // fresh copy from db
                    return LcRest.Booking.Get(bookingID, true, false, userID);
                }
            }

            throw new HttpException(405, "[[[Method not allowed.]]]");
        }

        public override dynamic Put()
        {
            dynamic updated = null;
            if (UrlData.Count == 1)
                updated = UpdateItem(UrlData[0].AsInt(0));

            if (updated == null)
            {
                if (UrlData.Count == 0)
                    throw new HttpException(405, "[[[Method not allowed.]]]");
                else
                    throw new HttpException(404, "[[[Booking not found.]]]");
            }

            return updated;
        }

        public LcRest.Address GetFormServiceAddress(int userID, LcRest.Locale locale)
        {
            var serviceAddress = new LcRest.Address
            {
                addressID = (Request["serviceAddress[addressID]"] ?? Request["serviceAddressID"]).AsInt(0),
                addressLine1 = Request["serviceAddress[addressLine1]"],
                addressLine2 = Request["serviceAddress[addressLine2]"],
                addressName = Request["serviceAddress[addressName]"],
                postalCode = Request["serviceAddress[postalCode]"],
                specialInstructions = Request["serviceAddress[specialInstructions]"],
                countryCode = Request["serviceAddress[countryCode]"] ?? locale.countryCode,
                latitude = Request["serviceAddress[latitude]"].IsEmpty() ? (double?)null : (double)Request["serviceAddress[latitude]"].AsDecimal(),
                longitude = Request["serviceAddress[longitude]"].IsEmpty() ? (double?)null : (double)Request["serviceAddress[longitude]"].AsDecimal()
            };
            if (serviceAddress.IsNewAddress())
            {
                serviceAddress.userID = userID;
            }
            return serviceAddress;
        }

        public void ApplyServiceAddressValidation()
        {
            Validation.RequireField("serviceAddress[postalCode]", LcRessources.RequiredField("Zip Code"));
            Validation.RequireField("serviceAddress[addressLine1]", LcRessources.RequiredField("Address Line 1"));
            Validation.Add("serviceAddress[addressLine1]", Validator.StringLength(100, 0, "[[[Address Line 1 must be fewer than 100 characters.]]]"));
            Validation.Add("serviceAddress[addressLine2]", Validator.StringLength(100, 0, "[[[Address Line 2 must be fewer than 100 characters.]]]"));
            Validation.Add("serviceAddress[addressName]", Validator.StringLength(50, 0, "[[[Address Name must be fewer than 50 characters.]]]"));
            Validation.Add("serviceAddress[specialInstructions]", Validator.StringLength(1000, 0, "[[[Special instructions must be fewer than 1,000 characters.]]]"));
            Validation.Add("serviceAddress[latitude]", Validator.Decimal("[[[Latitude must be a number]]]"));
            Validation.Add("serviceAddress[longitude]", Validator.Decimal("[[[Longitude must be a number]]]"));
        }

        public List<int> GetFormServices()
        {
            /* TODO: Update to receive an array of object like
                * { serviceProfessionalUserID: 0, totalPrice: 0, clientInputData: null,... }
                * like the pricing estimate detail object.
            */
            if (!Request.Form.AllKeys.Contains<string>("services[]"))
            {
                ModelState.AddError("services", "[[[Choose at least one service]]]");
            }
            var services = Request.Form.GetValues("services[]");
            var servicesIds = new List<int>();
            if (services == null || services.Length < 1)
            {
                ModelState.AddError("services", "[[[Choose at least one service]]]");
            }
            else
            {
                foreach (var serviceItem in services)
                {
                    var sid = serviceItem.AsInt(0);
                    if (sid == 0)
                    {
                        ModelState.AddError("services", "[[[Some specified services are incorrect]]]");
                        break;
                    }
                    servicesIds.Add(sid);
                }
            }
            return servicesIds;
        }

        public dynamic UpdateItem(int bookingID)
        {
            int clientUserID = WebSecurity.CurrentUserId;
            var locale = LcRest.Locale.Current;

            var booking = LcRest.Booking.Get(bookingID, true, true, clientUserID);

            var serviceStartTime = DateTimeOffsetFromISO(Request.Form["serviceStartTime"]);
            if (!serviceStartTime.HasValue)
            {
                ModelState.AddError("startTime", "[[[Start date and time is not valid]]]");
            }

            // Read services
            var servicesIds = GetFormServices();
            // Check if the services require an address
            var pricingSummary = new LcRest.PricingSummary();
            pricingSummary.SetDetailServices(booking.serviceProfessionalUserID, servicesIds);
            LcRest.Address serviceAddress = null;
            if (!pricingSummary.isPhoneServiceOnly)
            {
                serviceAddress = GetFormServiceAddress(clientUserID, locale);
                // In case a new address is given (need to be created)
                // or is an existent address with data tu update it,
                // validate the data
                if (serviceAddress.IsNewAddress() || !serviceAddress.IsEmpty())
                {
                    ApplyServiceAddressValidation();
                }
            }

            if (!Validation.IsValid() || !ModelState.IsValid)
            {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }

            var specialRequests = Request["specialRequests"];

            try {
                var itemExists = LcRest.Booking.UpdClientBooking(bookingID, clientUserID, serviceAddress, serviceStartTime.Value, servicesIds, specialRequests);
                // If doesn't exists, return null early
                if (!itemExists)
                {
                    return null;
                }
            }
            catch (ConstraintException delEx)
            {
                // The item cannot be inserted/updated:
                throw new HttpException(400, delEx.Message);
            }

            // Return database copy
            return LcRest.Booking.Get(bookingID, true, false, clientUserID);
        }

        public dynamic CreateItem()
        {
            // Parameters
            int userID = WebSecurity.CurrentUserId;
            int itemID = 0;

            Validation.RequireField("serviceProfessionalUserID", LcRessources.RequiredField("Service Professional"));
            Validation.RequireField("jobTitleID", LcRessources.RequiredField("Job Title"));
            Validation.Add("serviceProfessionalUserID", Validator.Integer("Service Professional"));
            Validation.Add("jobTitleID", Validator.Integer(LcRessources.RequiredField("Job Title")));

            // TODO Implement gratuity as of #659
            //Validation.Add("gratuityAmount", Validator.Decimal("Gratuity must be a number"));
            //Validation.Add("gratuityPercentage", Validator.Decimal("Gratuity must be a number"));

            var serviceProfessionalUserID = Request.Form["serviceProfessionalUserID"].AsInt();
            var jobTitleID = Request.Form["jobTitleID"].AsInt();
            var bookCode = Request.Form["bookCode"];
            //var gratuityAmount = Request.Form["gratuityAmount"].AsDecimal();
            //var gratuityPercentage = Request.Form["gratuityPercentage"].AsDecimal();
            // TODO To implement on recurring bookings. It's expected that more fields are required, to know the recurrence repeatition pattern/rules
            //var makeRepeatBooking = Request.Form["makeRepeatBooking"].AsBool();

            var locale = LcRest.Locale.Current;
            // Get booking presets for current data, to know some fixed settings like instantBooking
            var booking = LcRest.Booking.NewFor(userID, serviceProfessionalUserID, jobTitleID, locale.languageID, locale.countryID, bookCode);

            var servicesIds = GetFormServices();

            // Date/times: main and alternative1/2
            var requiredStartTimeNameError = "[[[Start date and time is not valid]]]";

            DateTimeOffset? alternative1StartTime = null;
            DateTimeOffset? alternative2StartTime = null;
            if (!booking.instantBooking) {
                requiredStartTimeNameError = "[[[Preferred start date and time is not valid]]]";
                if (!Request.Form["alternative1StartTime"].IsEmpty()) {
                    alternative1StartTime = DateTimeOffsetFromISO(Request.Form["alternative1StartTime"]);
                    if (!alternative1StartTime.HasValue) {
                        ModelState.AddError("alternative1StartTime", "[[[Alternative date and time 1 is not valid]]]");
                    }
                }
                if (!Request.Form["alternative2StartTime"].IsEmpty()) {
                    alternative2StartTime = DateTimeOffsetFromISO(Request.Form["alternative2StartTime"]);
                    if (!alternative2StartTime.HasValue)
                    {
                        ModelState.AddError("alternative2StartTime", "[[[Alternative date and time 2 is not valid]]]");
                    }
                }
            }

            var serviceStartTime = DateTimeOffsetFromISO(Request.Form["serviceStartTime"]);
            if (!serviceStartTime.HasValue)
            {
                ModelState.AddError("startTime", requiredStartTimeNameError);
            }

            // Check if the services require an address
            var pricingSummary = new LcRest.PricingSummary();
            pricingSummary.SetDetailServices(serviceProfessionalUserID, servicesIds);
            LcRest.Address serviceAddress = null;
            if (!pricingSummary.isPhoneServiceOnly) {
                serviceAddress = GetFormServiceAddress(userID, locale);
                if (serviceAddress.IsNewAddress())
                {
                    ApplyServiceAddressValidation();
                }
            }

            if (!Validation.IsValid() || !ModelState.IsValid) {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }

            var specialRequests = Request["specialRequests"];

            try
            {
                // Create booking
                booking = LcRest.Booking.InsClientBooking(
                    userID,
                    serviceProfessionalUserID,
                    jobTitleID,
                    serviceAddress,
                    serviceStartTime.Value,
                    alternative1StartTime,
                    alternative2StartTime,
                    servicesIds,
                    locale.languageID,
                    locale.countryID,
                    bookCode,
                    specialRequests
                );
                itemID = booking.bookingID;

                if (booking.paymentEnabled) {
                    // Collect payment
                    var address = new LcData.Address {
                        AddressLine1 = Request["billingAddress[addressLine1]"],
                        AddressLine2 = Request["billingAddress[addressLine2]"],
                        PostalCode = Request["billingAddress[postalCode]"],
                        CountryID = locale.countryID
                    };
                    var autoAddress = LcRest.Address.GetPostalCodeData(address.PostalCode, address.CountryID, true);
                    if (autoAddress != null) {
                        address.StateProvinceCode = autoAddress.stateProvinceCode;
                        address.City = autoAddress.city;
                    }

                    var paymentErrors = booking.CollectPayment(new LcPayment.InputPaymentMethod
                    {
                        paymentMethodID = Request["paymentMethod[paymentMethodID]"],
                        cardNumber = Request["paymentMethod[cardNumber]"],
                        nameOnCard = Request["paymentMethod[nameOnCard]"],
                        expirationMonth = Request["paymentMethod[expirationMonth]"],
                        expirationYear = Request["paymentMethod[expirationYear]"],
                        securityCode = Request["paymentMethod[securityCode]"],
                        billingAddress = address
                    }, Request["paymentMethod[savePayment]"].AsBool());

                    if (paymentErrors != null && paymentErrors.Count > 0)
                    {
                        // At this point, we show errors and the API consumer must attempt
                        // calls only to update the provided payment data for the generated bookingID
                        // not to pass all the data again since the other details are saved and
                        // available time reserved.
                        foreach(var paymentErr in paymentErrors) {
                            ModelState.AddError(paymentErr.Key, paymentErr.Value);
                        }
                        // Throws errors
                        throw new HttpException(400, "[[[We weren't able to process your payment, please review]]]");
                    }
                }
            }
            catch (ConstraintException delEx)
            {
                // The item cannot be inserted/updated:
                throw new HttpException(400, delEx.Message);
            }

            // Return ID
            return itemID;
        }
    }
}
@{
    // This API, *in an exceptional way*, allows anonymous access on GET, because we choosen to allow
    // sign-up on the booking confirmation step. On that cases, a userID of 0 will be used for database
    // checks.
    //Response.RestRequiresUser(LcData.UserInfo.UserType.User);
    new RestMeClientBooking().JsonResponse(this);
}
