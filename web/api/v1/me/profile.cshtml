@using WebMatrix.WebData;
@*
    Reading and updating the logged User Profile.

    Options:

    - GET: no params

    - PUT:
        // Name
        firstName:string Editable
        lastName:string Editable
        secondLastName:string Editable
        businessName:string Editable
        // Contact
        alternativeEmail:string Editable
        phone:string Editable
        canReceiveSms:bool Editable
        birthMonthDay:int Editable. Day of the month of the birthday (the year is not wanted)
        birthMonth:int Editable. Month of the birthday (the year is not wanted)
        isOrganization:bool Editable

    - PUT /tracking: This URL is intented to be a differencial update of the profile tracking related fields, where
            all values are optional from being specified. Right now there is only one possible value:
        onboardingStep:string Editable

    - POST /become-service-professional: A simple request that changes the user profile to be a professional with
            the basic set-up needed.

    - @Result {
        // ID
        userID:int Auto
        email:string

        // Name
        firstName:string Editable
        lastName:string Editable
        secondLastName:string Editable
        businessName:string Editable

        // Contact
        alternativeEmail:string Editable
        phone:string Editable
        canReceiveSms:bool Editable
        birthMonthDay:int Editable. Day of the month of the birthday (the year is not wanted)
        birthMonth:int Editable. Month of the birthday (the year is not wanted)

        // Account Type
        isServiceProfessional:bool Auto
        isClient:bool Auto

        // Account Status
        onboardingStep:string Auto. The name of the step in the onboarding process, the UI must guide user to that to complete the basic profile.
        accountStatusID:int Auto
        createdDate:datetime Auto
        updatedDate:datetime Auto
    }

    EXAMPLES {
        "User Profile (get and update)": {
            "url": "/api/v1/en-US/me/profile",
            "get": { },
            "put": {
                // Name
                "firstName": "Iago",
                "lastName": "Lorenzo",
                "secondLastName": "Salgueiro",
                "businessName": "",
                // Contact
                "alternativeEmail": "",
                "phone": "",
                "canReceiveSms": false,
                "birthMonthDay": 20,
                "birthMonth": 4,
                "isOrganization": false
            }
        },
        "User Profile: Track changes (differential changes)": {
            "url": "/api/v1/en-US/me/profile/tracking",
            "put": {
                "onboardingStep": "welcome"
            }
        },
        "User Profile: save just  organization info (for isOrganization users)": {
            "url": "/api/v1/en-US/me/profile/organization",
            "put": {
                "orgName": "My Coop.",
                "orgDescription": null,
                "orgWebsite": null
            }
        },
        "User Profile: Become a service professional": {
            "url": "/api/v1/en-US/me/profile/become-service-professional",
            "post": {}
        }
    }
*@
@functions{
    public class RestUserProfile : RestWebPage
    {
        private dynamic GetData()
        {
            return LcRest.UserProfile.Get(WebSecurity.CurrentUserId);
        }

        public override dynamic Get()
        {
            if (UrlData.Count > 0)
            {
                throw new HttpException(404, "[[[Not found]]]");
            }

            return GetData();
        }

        object PutTracking()
        {

            // IMPORTANT: When implementing other optional options on this API point,
            // ensure to check first if the key was specified and avoid update if not
            // (preventing setting an unwanted default value)

            var step = Request.Form["onboardingStep"];

            LcData.UserInfo.SetOnboardingStep(WebSecurity.CurrentUserId, step);

            return "OK";
        }

        object PutOrganization()
        {
            // Allow only to isOrganization profiles
            var userID = WebSecurity.CurrentUserId;
            var user = LcRest.UserProfile.Get(userID);
            if (user.isOrganization)
            {
                Validation.RequireField("orgName", LcRessources.RequiredField("Organization name"));
                Validation.Add("orgName", Validator.StringLength(200, 3, "[[[Organization name must contain between 3 and 200 charactres]]]"));
                Validation.Add("orgDescription", Validator.StringLength(400, 0, "[[[Organization description must contain less than 400 charactres]]]"));
                Validation.Add("orgWebsite", Validator.StringLength(400, 0, "[[[Organization website must contain less than 255 charactres]]]"));
                Validation.Add("orgWebsite", Validator.Url("[[[Organization website is malformed]]]"));

                if (!Validation.IsValid() || !ModelState.IsValid)
                {
                    throw new HttpException(400, LcRessources.ValidationSummaryTitle);
                }

                var profile = new LcRest.UserProfile
                {
                    userID = WebSecurity.CurrentUserId,
                    orgName = Request.Form["orgName"],
                    orgDescription = Request.Form["orgDescription"],
                    orgWebsite = Request.Form["orgWebsite"]
                };

                LcRest.UserProfile.SetOrganizationInfo(profile);

                return GetData();
            }
            else
            {
                throw new HttpException(404, "[[[Not found]]]");
            }
        }

        public override dynamic Post()
        {
            if (UrlData.Count == 1)
            {
                if (UrlData[0] == "become-service-professional")
                {
                    if (LcRest.UserProfile.Get(WebSecurity.CurrentUserId).isServiceProfessional)
                    {
                        return "[[[Already a service professional]]]";
                    }
                    else
                    {
                        LcAuth.BecomeProvider(WebSecurity.CurrentUserId, null, true);
                        return "[[[OK]]]";
                    }
                }
            }
            throw new HttpException(404, "[[[Not found]]]");
        }

        public override dynamic Put()
        {
            if (UrlData.Count > 1)
            {
                throw new HttpException(404, "[[[Not found]]]");
            }
            else if (UrlData.Count == 1)
            {
                if (UrlData[0] == "tracking")
                {
                    return PutTracking();
                }
                else if (UrlData[0] == "organization")
                {
                    return PutOrganization();
                }
                else
                {
                    throw new HttpException(404, "[[[Not found]]]");
                }
            }

            // Validation
            Validation.RequireField("firstname", LcRessources.RequiredField("First name"));
            Validation.RequireField("lastname", LcRessources.RequiredField("Last name"));
            Validation.Add("alternativeEmail", Validator.Regex(LcValidators.EmailAddressRegexPattern, "[[[The alternative email is not valid.]]]"));
            Validation.Add("birthMonthDay", Validator.Integer("[[[Birth Day must be an number (day of the month)]]]"));
            Validation.Add("birthMonth", Validator.Integer("[[[Birth Month must be an number]]]"));

            if (!Validation.IsValid() || !ModelState.IsValid)
            {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }

            // Parameters
            var profile = new LcRest.UserProfile
            {
                userID = WebSecurity.CurrentUserId,
                firstName = Request.Form["firstName"],
                lastName = Request.Form["lastName"],
                secondLastName = Request.Form["secondLastName"],
                businessName = Request.Form["businessName"],
                alternativeEmail = Request.Form["alternativeEmail"],
                phone = Request.Form["phone"],
                canReceiveSms = Request.Form["canReceiveSms"].AsBool(),
                birthMonthDay = Request.Form["birthMonthDay"].AsInt(),
                birthMonth = Request.Form["birthMonth"].AsInt(),
                isOrganization = Request.Form["isOrganization"].AsBool()
            };

            LcRest.UserProfile.Set(profile);

            return GetData();
        }
    }
}
@{
    Response.RestRequiresUser(LcData.UserInfo.UserType.User);
    new RestUserProfile().JsonResponse(this);
}
