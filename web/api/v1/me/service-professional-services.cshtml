@*
    Service Professional Services REST API: read and update the logged user
    services.

    Input and Output record scheme example:
    {
        "serviceProfessionalServiceID": 73,
        "pricingTypeID": 1,
        "serviceProfessionalUserID": 141,
        "jobTitleID": 16,
        "name": "Testing 2",
        "description": "Testing 2",
        "price": 0,
        "serviceDurationMinutes": 0, // In minutes! Different than pricing-estimate (there is in hours)
        "firstTimeClientsOnly": false,
        "numberOfSessions": 1,
        "priceRate": 14,
        "priceRateUnit": "hour",
        "isPhone": false,
        "visibleToClientID: 0,
        "createdDate": "2013-08-28T21:05:59.947",
        "updatedDate": "2013-08-28T21:08:02.113",
        "serviceAttributes": [
            442,
            441,
            446
        ]
    }

    The Input has some extra fields that act as options, changing how
    is computed or validated the data:
    {
        "noPriceRate": true // by default as false, only required for pricing types that
                            // request a 'price rate', so explicitely the provider
                            // decide 'not to state' the price rate. This way, with 'true',
                            // the price rate validation will not fail if not value is provided
                            // (that only happens on the pricing type asking for a price rate),
                            // and if any will be discarded with this --technically, not a need
                            // but helps to avoid mistakes and allows the special validation.
    }

    EXAMPLES {
        "Service Professional Pricing - All user pricing": {
            "url": "/api/v1/en-US/me/service-professional-services"
        },
        "Service Professional Pricing - Client-specific pricing (all job titles)": {
            "url": "/api/v1/en-US/me/service-professional-services/client/141"
        },
        "Service Professional Pricing - Per Job Title": {
            "url": "/api/v1/en-US/me/service-professional-services/106",
            "post": {
                "pricingTypeID": 3,
                "name": "Testing 2",
                "description": "Testing 2",
                "price": 20,
                "serviceDurationMinutes": 60, // In minutes! Different than pricing-estimate (there is in hours)
                "firstTimeClientsOnly": false,
                "numberOfSessions": 1,
                "priceRate": 14,
                "priceRateUnit": "hour",
                "isPhone": false,
                "visibleToClientID": 0, // 0 for public, or clientID for client-specific pricing
                "createdDate": "2013-08-28T21:05:59.947",
                "updatedDate": "2013-08-28T21:08:02.113",
                "serviceAttributes": [
                    501
                ],
                "noPriceRate": false,
                "api comment": "Pricing is assigned to the logged user, cannot be added to other user so no user parameter is needed. serviceDurationMinutes parameter as an integer. Different validation rules apply depending on the pricing type"
            }
        },
        "Service Professional Pricing - Job Title - Pricing item": {
            "url": "/api/v1/en-US/me/service-professional-services/106/73",
            "get": { },
            "put": {
                "pricingTypeID": 3,
                "name": "Testing 2",
                "description": "Testing 2",
                "price": 20,
                "serviceDurationMinutes": 60, // In minutes! Different than pricing-estimate (there is in hours)
                "firstTimeClientsOnly": false,
                "numberOfSessions": 1,
                "priceRate": 14,
                "priceRateUnit": "hour",
                "isPhone": false,
                "createdDate": "2013-08-28T21:05:59.947",
                "updatedDate": "2013-08-28T21:08:02.113",
                "serviceAttributes": [
                    501
                ],
                "noPriceRate": false,
                "visibleToClientID": 0, // 0 for public, or clientID for client-specific pricing
                "api comment": "Pricing is assigned to the logged user, cannot be added to other user so no user parameter is needed. serviceDurationMinutes parameter as an integer. Different validation rules apply depending on the pricing type"
            },
            "delete": {}
        },
        "Service Professional Pricing - Job Title and Client (client-specific and public pricings)": {
            "url": "/api/v1/en-US/me/service-professional-services/106/client/562",
            "get": {
                "api comment": "The result includes all pricings for a job title that are available for the client - both client-specific pricings and public pricings"
            }
        }
    }
*@
@functions{
    public class RestServiceProfessionalService : RestWebPage
    {
        public override dynamic Get()
        {
            // Parameters
            var userID = WebSecurity.CurrentUserId;

            if (UrlData.Count == 0)
            {
                var visibility = LcRest.ServiceProfessionalService.Visibility.BookableByProvider();
                return LcRest.ServiceProfessionalService.GetList(userID, -1, clientVisibility: visibility);
            }
            else if (UrlData.Count == 1)
            {
                // Route: /:jobTitleID
                var jobTitleID = UrlData[0].AsInt(0);
                var visibility = LcRest.ServiceProfessionalService.Visibility.BookableByProvider();
                return LcRest.ServiceProfessionalService.GetList(userID, jobTitleID, clientVisibility: visibility);
            }
            else if (UrlData.Count == 2 && UrlData[0].Equals("client", StringComparison.Ordinal))
            {
                // Route: /client/:clientID
                var clientID = UrlData[1].AsInt(LcRest.ServiceProfessionalService.ClientVisibilityPublic);

                if (LcRest.UserProfile.Exists(clientID))
                {
                    var visibility = LcRest.ServiceProfessionalService.Visibility.SpecificToClient(clientID);
                    return LcRest.ServiceProfessionalService.GetList(userID, clientVisibility: visibility);
                }

                throw new HttpException(404, "[[[Client not found]]]");
            }
            else if (UrlData.Count == 2)
            {
                // Route: /:jobTitleID[/:serviceProfessionalServiceID]
                var jobTitleID = UrlData[0].AsInt(0);
                var itemID = UrlData[1].AsInt(0);
                return GetItem(userID, jobTitleID, itemID);
            }
            else if (UrlData.Count == 3)
            {
                // Route: /:jobTitleID/client/:clientID -> public + items specific for the client
                var jobTitleID = UrlData[0].AsInt(0);
                var clientID = UrlData[2].AsInt(LcRest.ServiceProfessionalService.ClientVisibilityPublic);

                if (LcRest.UserProfile.Exists(clientID))
                {
                    var visibility = LcRest.ServiceProfessionalService.Visibility.BookableByProviderForClient(clientID);
                    return LcRest.ServiceProfessionalService.GetList(userID, jobTitleID, clientVisibility: visibility);
                }

                throw new HttpException(404, "[[[Client not found]]]");
            }

            throw new HttpException(404, "[[[Not Found]]]");
        }

        public dynamic GetItem(int userID, int jobTitleID, int itemID)
        {
            if (itemID > 0)
            {
                var item = LcRest.ServiceProfessionalService.Get(itemID, userID, jobTitleID);
                if (item != null) {
                    return item;
                }
            }

            throw new HttpException(404, "[[[Pricing not found.]]]");
        }

        public dynamic SetItem(int userID, int jobTitleID, int itemID)
        {
            // NOTE: Using same logic and structures than in the edit form on dashboard, from the LcPricingModel classes
            var data = new LcPricingModel.PackageBaseData {
                ID = itemID,
                PositionID = jobTitleID,
                PricingTypeID = Request["pricingTypeID"].AsInt(),
                ProviderUserID = userID,
                // some defaults
                NumberOfSessions = 1,
                PriceRateUnit = "hour",
                IsPhone = false
            };
            var config = LcPricingModel.PackageBasePricingTypeConfigs[data.PricingTypeID];

            Validation.RequireField("pricingTypeID", LcRessources.RequiredField("Pricing Type"));
            Validation.Add("pricingTypeID", Validator.Integer(LcRessources.RequiredField("Pricing Type")));
            Validation.RequireField("name", LcRessources.RequiredField("Name"));
            Validation.Add("name", Validator.StringLength(50, 0, "[[[Name must be fewer than 50 characters.]]]"));
            // Description is not more required per Josh request by email on 2015-04-20 17:12
            //Validation.RequireField("description", LcRessources.RequiredField("Description"));
            Validation.Add("description", Validator.StringLength(1000, 0, "[[[Description must be fewer than 1000 characters.]]]"));

            // Depending on config validation rules
            if (config.PriceLabel != null) {
                Validation.RequireField("price", LcRessources.RequiredField("Price"));
                Validation.Add("price", Validator.Decimal("[[[Price must be a number and not contain the $ symbol.]]]"));
            }
            if (config.DurationLabel != null) {
                Validation.Add("serviceDurationMinutes", Validator.Integer("[[[Duration must be the number of minutes without decimals]]]"));
            }
            if (config.NumberOfSessionsLabel != null) {
                Validation.RequireField("numberOfSessions", LcRessources.RequiredField("Number of appointments included"));
                Validation.Add("numberOfSessions", Validator.Integer("[[[Number of appointments included must be a number without decimals]]]"));
            }

            // Setting up data (will be used to be saved or to display form errors)
            data.LanguageID = LcData.GetCurrentLanguageID();
            data.CountryID = LcData.GetCurrentCountryID();
            data.Name = config.FixedName ?? Request["name"];
            data.Description = Request["description"] ?? "";
            data.Price = Request["price"].AsDecimal();
            data.Duration = TimeSpan.FromMinutes(Request["serviceDurationMinutes"].AsInt());
            data.FirstTimeClientsOnly = Request["firstTimeClientsOnly"].AsBool();
            {
                var nses = Request["numberOfSessions"].AsInt(1);
                if (nses < 1) { nses = 1; }
                data.NumberOfSessions = nses;
            }
            data.PriceRate = (config.PriceRateQuantityLabel == null || Request["noPriceRate"].AsBool()) ? null : (decimal?)Request["priceRate"].AsDecimal();
            data.PriceRateUnit = ((config.PriceRateQuantityLabel == null || Request["noPriceRate"].AsBool()) ? null : Request["priceRateUnit"]) ?? data.PriceRateUnit;
            data.IsPhone = Request["isPhone"].AsBool();

            // visibleToClientID is not required, default to publicly available
            Validation.Add("visibleToClientID", Validator.Integer());
            Validation.Add("visibleToClientID", new LcRest.ServiceProfessionalService.VisibleToClientValidator("[[[Must be a client ID or one of the predefined constants]]]"));
            data.visibleToClientID = (Request["visibleToClientID"] == null) ? LcRest.ServiceProfessionalService.ClientVisibilityPublic : Request["visibleToClientID"].AsInt();

            var checkedAtts = Request.Form.GetValues("serviceAttributes[]");
            if (config.IncludeServiceAttributes &&
                checkedAtts != null &&
                checkedAtts.Length > 0) {
                foreach (var att in checkedAtts) {
                    int attId = att.AsInt();
                    if (attId > 0) {
                        data.ServiceAttributes.Add(attId);
                    }
                    else {
                        ModelState.AddError("serviceAttributes[]", "[[[Some specified attributes are wrong]]]");
                    }
                }
            }
            // Some manual validations
            // Require price-rate and unit if is in config and not checked 'no-price-rate'
            if (config.PriceRateQuantityLabel != null && !Request["noPriceRate"].AsBool() && data.PriceRate <= 0) {
                ModelState.AddError("priceRate", config.PriceRateIsRequiredValidationError);
            }
            if (config.PriceRateUnitLabel != null && !Request["noPriceRate"].AsBool() && String.IsNullOrWhiteSpace(data.PriceRateUnit)) {
                ModelState.AddError("priceRateUnit", config.PriceRateUnitIsRequiredValidationError);
            }
            if (config.RequireDuration && data.Duration.TotalMinutes < 1) {
                ModelState.AddError("serviceDurationMinutes", LcRessources.RequiredField("Duration"));
            }
            if (config.Mod != null) {
                config.Mod.ValidateProviderData(data, ModelState);
            }

            if (!Validation.IsValid() || !ModelState.IsValid) {
                throw new HttpException(404, LcRessources.ValidationSummaryTitle);
            }

            // To save
            data.Save();
            itemID = data.ID;

            return GetItem(userID, jobTitleID, itemID);
        }

        public override dynamic Post()
        {
            RequiresUser(LcData.UserInfo.UserType.Provider);
            var userID = WebSecurity.CurrentUserId;

            if (UrlData.Count == 1 &&
                UrlData[0].IsInt()) {
                var jobTitleID = UrlData[0].AsInt();
                return SetItem(userID, jobTitleID, 0);
            }

            throw new HttpException(405, "[[[Method not allowed.]]]");
        }

        public override dynamic Put()
        {
            RequiresUser(LcData.UserInfo.UserType.Provider);
            var userID = WebSecurity.CurrentUserId;

            dynamic updated = null;
            if (UrlData.Count == 2 &&
                UrlData[0].IsInt() &&
                UrlData[1].IsInt()) {
                var jobTitleID = UrlData[0].AsInt();
                var itemID = UrlData[1].AsInt();
                updated = SetItem(userID, jobTitleID, itemID);
            }

            if (updated == null) {
                if (UrlData.Count != 2)
                    throw new HttpException(405, "[[[Method not allowed.]]]");
                else
                    throw new HttpException(404, "[[[Pricing not found.]]]");
            }

            return updated;
        }

        public dynamic DelItem(int userID, int jobTitleID, int itemID)
        {
            var item = GetItem(userID, jobTitleID, itemID);

            if (item != null) {

                LcPricingModel.PackageBaseData.Delete(itemID, userID, jobTitleID);

                return item;
            }

            throw new HttpException(404, "[[[Pricing not found.]]]");
        }

        public override dynamic Delete()
        {
            RequiresUser(LcData.UserInfo.UserType.Provider);
            var userID = WebSecurity.CurrentUserId;

            dynamic deleted = null;
            if (UrlData.Count == 2 &&
                UrlData[0].IsInt() &&
                UrlData[1].IsInt()) {
                var jobTitleID = UrlData[0].AsInt();
                var itemID = UrlData[1].AsInt();
                deleted = DelItem(userID, jobTitleID, itemID);
            }

            if (deleted == null) {
                if (UrlData.Count != 2)
                    throw new HttpException(405, "[[[Method not allowed.]]]");
                else
                    throw new HttpException(404, "[[[Pricing not found.]]]");
            }

            return deleted;
        }
    }
}
@{
    // Allow provider to access, later will force access to owner provider on editing capabilities
    Response.RestRequiresUser(LcData.UserInfo.UserType.ServiceProfessional);
    new RestServiceProfessionalService().JsonResponse(this);
}