@*
    Reading and updating the Calendar Syncing URLs.

    Options:

    - GET: no params
    
    - PUT: sending
        - icalImportURL: URL to update

    /resetExportURL
        - POST: no data send, just reset the Token and returns the new URL, including all the object for convenience
            as a normal GET

    - @Result {
        "icalExportURL":string, // (Loconomics generated URL using the internal privateCalendarToken and the userID)
        "icalImportURL":string // (google calendar public or private URL or any icalendar URL)
    }

    EXAMPLES {
        "Calendar Syncing": {
            "url": "/api/v1/en-US/me/calendar-syncing",
            "get": { },
            "put": {
                "icalImportUrl": "http://calendar.google.com/something/ical.ics"
            }
        },
        "Calendar Syncing Reset Export URL": {
            "url": "/api/v1/en-US/me/calendar-syncing/reset-export-url",
            "post": { }
        }
    }
*@
@functions{
    public class RestCalendarSyncing : RestWebPage
    {
        private dynamic GetData()
        {
            return LcCalendar.GetRestCalendarSyncingOptions(WebSecurity.CurrentUserId);
        }
        
        public override dynamic Get()
        {
            if (UrlData.Count == 0) {
 	            return GetData();
            }
            else {
                throw new HttpException(404, "[[[Not found]]]");
            }
        }

        public override dynamic Put()
        {
            var userID = WebSecurity.CurrentUserId;
            var icalImportURL = Request["icalImportUrl"];

            LcCalendar.SetIcalendarImportUrl(userID, icalImportURL);
            
            return GetData();
        }

        public override dynamic Post()
        {
            if (UrlData[0] == "reset-export-url") {
                
                // Respond with OK, rather than default 201
                this.WebPage.Response.StatusCode = 200;
                
                LcCalendar.ResetIcalendarExportUrl(WebSecurity.CurrentUserId);
                
                return GetData();
            }
            else if (UrlData.Count == 0) {
                throw new HttpException(405, "[[[Method not allowed]]]");
            }
            else {
                throw new HttpException(404, "[[[Not found]]]");
            }
        }
    }
}
@{   
    Response.RestRequiresUser(LcData.UserInfo.UserType.User);
    new RestCalendarSyncing().JsonResponse(this);
}
