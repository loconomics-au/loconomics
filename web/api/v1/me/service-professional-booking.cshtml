@*
    It allows serviceProfessionals to create and update a booking.
    It has a different set of possibilities than a client or the normal booking process.
    NOTE: To query/get bookings, use the general 'bookings' API.

    TODO To implement "payment processing enabled", implemented only for "scheduling software"
    TODO Complete documentation details (methods, params)

    EXAMPLES {
        "Service Professional Booking: Create booking": {
            "url": "/api/v1/en-US/me/service-professional-booking",
            "post": {
                "clientUserID": 141,
                "jobTitleID": 106,
                "serviceAddressID": 1,
                "startTime": "2015-01-01T10:00:00Z",
                "services": [ 8, 35 ],
                "preNotesToClient": "",
                "preNotesToSelf": "",
                "api comment": "Fields of the Simplified Freelancer Booking, fits to the App needs. Services is a list of service attributes IDs included in the pricing."
            }
        },
        "Service Professional Booking: Update booking": {
            "url": "/api/v1/en-US/me/service-professional-booking/73",
            "put": {
                "serviceAddressID": 19,
                "startTime": "2015-02-08T10:30:00Z",
                "services": [ 8, 35 ],
                "preNotesToClient": "",
                "preNotesToSelf": "",
                "postNotesToClient": "",
                "postNotesToSelf": "",
                "api comment": "Fields of the Simplified Freelancer Booking, fits to the App needs. Services is a list of service attributes IDs included in the pricing."
            }
        },
        "Service Professional Booking: Cancel booking": {
            "url": "/api/v1/en-US/me/service-professional-booking/73/cancel",
            "post": {}
        },
        "Service Professional Booking: Deny/decline booking": {
            "url": "/api/v1/en-US/me/service-professional-booking/73/deny",
            "post": {}
        },
        "Service Professional Booking: Confirm a client booking request": {
            "url": "/api/v1/en-US/me/service-professional-booking/73/confirm",
            "post": {
                "dataType": "preferred",
                "api comment": "dataType can be: preferred, alternative1 or alternative2. 'Preferred' will pick up the date currently on the 'serviceDateID'."
            }
        }
    }
*@
@functions{
    public class RestServiceProfessionalBookings : RestWebPage
    {
        /// <summary>
        /// It returns an item.
        /// NOTE: Same code than the general 'bookings' API, just to enable this API to
        /// return the created/updated booking record.
        /// </summary>
        /// <param name="itemID"></param>
        /// <returns></returns>
        public dynamic GetItem(int itemID)
        {
            // Parameters
            int userID = WebSecurity.CurrentUserId;

            if (itemID > 0)
            {
                return LcRest.Booking.Get(itemID, true, false, userID);
            }

            throw new HttpException(404, "[[[Booking not found.]]]");
        }


        public LcRest.Address GetFormServiceAddress(LcRest.Locale locale)
        {
            var serviceAddress = new LcRest.Address
            {
                // Can provide a new client address, so get useRid
                userID = Request["serviceAddress[userID]"].AsInt(0),
                addressID = (Request["serviceAddress[addressID]"] ?? Request["serviceAddressID"]).AsInt(0),
                addressLine1 = Request["serviceAddress[addressLine1]"],
                addressLine2 = Request["serviceAddress[addressLine2]"],
                addressName = Request["serviceAddress[addressName]"],
                postalCode = Request["serviceAddress[postalCode]"],
                specialInstructions = Request["serviceAddress[specialInstructions]"],
                countryCode = Request["serviceAddress[countryCode]"] ?? locale.countryCode,
                latitude = Request["serviceAddress[latitude]"].IsEmpty() ? (double?)null : (double)Request["serviceAddress[latitude]"].AsDecimal(),
                longitude = Request["serviceAddress[longitude]"].IsEmpty() ? (double?)null : (double)Request["serviceAddress[longitude]"].AsDecimal()
            };
            return serviceAddress;
        }

        public void ApplyServiceAddressValidation()
        {
            Validation.RequireField("serviceAddress[postalCode]", LcRessources.RequiredField("Zip Code"));
            Validation.RequireField("serviceAddress[addressLine1]", LcRessources.RequiredField("Address Line 1"));
            Validation.Add("serviceAddress[addressLine1]", Validator.StringLength(100, 0, "[[[Address Line 1 must be fewer than 100 characters.]]]"));
            Validation.Add("serviceAddress[addressLine2]", Validator.StringLength(100, 0, "[[[Address Line 2 must be fewer than 100 characters.]]]"));
            Validation.Add("serviceAddress[addressName]", Validator.StringLength(50, 0, "[[[Address Name must be fewer than 50 characters.]]]"));
            Validation.Add("serviceAddress[specialInstructions]", Validator.StringLength(1000, 0, "[[[Special instructions must be fewer than 1,000 characters.]]]"));
            Validation.Add("serviceAddress[latitude]", Validator.Decimal("[[[Latitude must be a number]]]"));
            Validation.Add("serviceAddress[longitude]", Validator.Decimal("[[[Longitude must be a number]]]"));
        }

        public List<int> GetFormServices()
        {
            /* TODO: Update to receive an array of object like
                * { serviceProfessionalUserID: 0, totalPrice: 0, clientInputData: null,... }
                * like the pricing estimate detail object.
            */
            if (!Request.Form.AllKeys.Contains<string>("services[]"))
            {
                ModelState.AddError("services", "[[[Choose at least one service]]]");
            }
            var services = Request.Form.GetValues("services[]");
            var servicesIds = new List<int>();
            if (services == null || services.Length < 1)
            {
                ModelState.AddError("services", "[[[Choose at least one service]]]");
            }
            else
            {
                foreach (var serviceItem in services)
                {
                    var sid = serviceItem.AsInt(0);
                    if (sid == 0)
                    {
                        ModelState.AddError("services", "[[[Some specified services are incorrect]]]");
                        break;
                    }
                    servicesIds.Add(sid);
                }
            }
            return servicesIds;
        }

        public dynamic SetItem(int itemID)
        {
            // Parameters
            int serviceProfessionalUserID = WebSecurity.CurrentUserId;

            Validation.RequireField("startTime", LcRessources.RequiredField("Start Date and Time"));
            Validation.RequireField("clientUserID", LcRessources.RequiredField("Client"));
            Validation.Add("clientUserID", Validator.Integer("Choose a valid client"));
            Validation.Add("addressID", Validator.Integer("Choose a valid location"));

            var locale = LcRest.Locale.Current;
            
            var startTime = DateTimeOffsetFromISO(Request["startTime"]);
            if (!startTime.HasValue) {
                ModelState.AddError("startTime", "[[[Start date/time is not valid]]]");
            }

            // Read services
            var servicesIds = GetFormServices();
            // Check if the services require an address
            var pricingSummary = new LcRest.PricingSummary();
            pricingSummary.SetDetailServices(serviceProfessionalUserID, servicesIds);
            LcRest.Address serviceAddress = null;
            if (!pricingSummary.isRemoteService)
            {
                serviceAddress = GetFormServiceAddress(locale);
                // In case a new address is given (need to be created)
                // validate the data
                if (serviceAddress.IsNewAddress())
                {
                    ApplyServiceAddressValidation();
                }
            }

            if (!Validation.IsValid() || !ModelState.IsValid) {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }

            try
            {
                if (itemID == 0) {
                    itemID = LcRest.Booking.InsServiceProfessionalBooking(
                        Request["clientUserID"].AsInt(),
                        serviceProfessionalUserID,
                        Request["jobTitleID"].AsInt(),
                        serviceAddress,
                        startTime.Value,
                        servicesIds,
                        Request["preNotesToClient"],
                        Request["preNotesToSelf"],
                        Request["allowBookUnavailableTime"].AsBool(false),
                        locale.languageID,
                        locale.countryID
                    ).bookingID;
                }
                else {
                    var itemExists = LcRest.Booking.UpdServiceProfessionalBooking(
                        itemID,
                        serviceProfessionalUserID,
                        serviceAddress,
                        startTime.Value,
                        servicesIds,
                        Request["preNotesToClient"],
                        Request["preNotesToSelf"],
                        Request["postNotesToClient"],
                        Request["postNotesToSelf"],
                        Request["allowBookUnavailableTime"].AsBool(false)
                    );

                    // If doesn't exists, return null early
                    if (!itemExists) {
                        return null;
                    }
                }
            }
            catch (ConstraintException delEx)
            {
                // The item cannot be inserted/updated:
                throw new HttpException(400, delEx.Message);
            }

            // Return database copy
            return GetItem(itemID);
        }

        public override dynamic Post()
        {
            if (UrlData.Count == 0) {
                return SetItem(0);
            }
            if (UrlData.Count ==  2) {
                var userID = WebSecurity.CurrentUserId;
                var bookingID = UrlData[0].AsInt();
                // IMPORTANT: Internal use booking: (needed to confirm and other tasks)
                // After any task, a new fetched, public, booking record is returned
                var booking = LcRest.Booking.Get(bookingID, false, true, userID);
                if (booking == null ||
                    booking.serviceProfessionalUserID != userID) {
                    throw new HttpException(404, "[[[Not Found]]]");
                }
                StatusCode = 200;
                if (UrlData[1] == "cancel") {
                    booking.CancelBookingByServiceProfessional();
                    // fresh copy from db
                    return LcRest.Booking.Get(bookingID, true);
                }
                else if (UrlData[1] == "deny") {
                    booking.DeclineBooking();
                    // fresh copy from db
                    return LcRest.Booking.Get(bookingID, true);
                }
                else if (UrlData[1] == "confirm")
                {
                    var dateType = Request["dateType"];
                    booking.ConfirmBookingRequest(dateType);
                    // fresh copy from db
                    return LcRest.Booking.Get(bookingID, true);
                }
            }
            throw new HttpException(405, "[[[Method not allowed.]]]");
        }

        public override dynamic Put()
        {
            dynamic updated = null;
            if (UrlData.Count == 1)
                updated = SetItem(UrlData[0].AsInt(0));

            if (updated == null) {
                if (UrlData.Count == 0)
                    throw new HttpException(405, "[[[Method not allowed.]]]");
                else
                    throw new HttpException(404, "[[[Booking not found.]]]");
            }

            return updated;
        }
    }
}
@{
    Response.RestRequiresUser(LcData.UserInfo.UserType.Provider);
    new RestServiceProfessionalBookings().JsonResponse(this);
}
