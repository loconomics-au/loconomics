@using WebMatrix.WebData;
@*
    Get and set the current user (service professional) clients list.
    Read and edit API for logged user, with additional API to perform a public search
    of users that may be know by the user.

    Options:
    
    - GET: get all the clients of the service professional user requesting the data

    - GET /@clientUserID: get the client information for the given userID and the service professional user requesting the data

    - GET /public-search: Public search of users know externally by the service professional with exact match of one of the optional identifiable fields: fullName, email, phone.
        The set of results does not exists as frelancer's clients, so control fields are null ever (createdDate, updatedDate) and Editable is false.
        Even if is named 'public' is required that users accessing this API to be logged and being service professionals.

    - POST: create a new client. Pass in all fields of class LsRestClient less the control fields, 'serviceProfessionalUserID' and the 'editable' field.
        A look up by email and phone are performed (exact macth) so not duplicated records can happens, throwing a Conflict HTTP error that provides the public
        data for the client that already exists (the data that can be extracted, default for others fields --like notesAboutClient field).

    - PUT /@clientUserID: Update a client record. clientUserID and serviceProfessionalUserID, additionally to control fields and 'editable' field, are not editable
        so they are discarded if specified.
        An bad requets HTTP error is throw if service professional (current user) has no rights to modify the data (on client side, 
        the 'editable' field can be checked before PUT the data, but even on extreme cases can happen than an initially editable client becomes
        not editable when attempting the request -user account status changes, as client enabling its marketplace account from a service professional record)

    - DELETE /@clientUserID

    - @Result list or item of type LcRest.Client

    EXAMPLES {
        "Clients (list and create)": {
            "url": "/api/v1/en-US/me/clients",
            "get": { },
            "post": {
                "firstName": "John",
                "lastName": "Smith",
                "secondLastName": "",
                "email": "john@smith.net",
                "phone": "1234567",
                "canReceiveSms": true,
                "birthMonth": 2,
                "birthMonthDay": 29,
                "notesAboutCustomer": ""
            }
        },
        "Clients (item)": {
            "url": "/api/v1/en-US/me/clients/141",
            "get": { },
            "put": {
                "firstName": "John",
                "lastName": "Smith",
                "secondLastName": "",
                "email": "john@smith.net",
                "phone": "1234567",
                "canReceiveSms": true,
                "birthMonth": 2,
                "birthMonthDay": 29,
                "notesAboutCustomer": ""
            },
            "delete": { }
        },
        "Clients Public Search": {
            "url": "/api/v1/en-US/me/clients/public-search",
            "get": {
                "fullName": "John Smith",
                "email": "john@smith.net",
                "phone": "1234"
            }
        }
    }
*@
@functions{
    public class RestClients : RestWebPage
    {
        public override dynamic Get()
        {
            if (UrlData.Count == 0) {
                var serviceProfessionalUserID = WebSecurity.CurrentUserId;
                return LcRest.Client.GetServiceProfessionalClients(serviceProfessionalUserID);
            }
            else if (UrlData.Count == 1 &&
                UrlData[0].IsInt()) {
                var serviceProfessionalUserID = WebSecurity.CurrentUserId;
                var clientUserID = UrlData[0].AsInt();
                var client = LcRest.Client.GetServiceProfessionalClient(serviceProfessionalUserID, clientUserID);
                if (client != null) {
                    return client;
                }
            }
            else if (UrlData.Count == 1 &&
                UrlData[0] == "public-search") {
                var serviceProfessionalUserID = WebSecurity.CurrentUserId;
                return LcRest.Client.PublicSearch(serviceProfessionalUserID, Request.QueryString["fullName"], Request.QueryString["email"], Request.QueryString["phone"]);
            }

            throw new HttpException(404, "[[[Not Found]]]");
        }

        public override dynamic Post()
        {
            if (UrlData.Count == 0) {
                var serviceProfessionalUserID = WebSecurity.CurrentUserId;
                // Create new client
                return SetClient(serviceProfessionalUserID);
            }

            // method not allowed
            return base.Post();
        }

        public override dynamic Put()
        {
            if (UrlData.Count == 1 &&
                UrlData[0].IsInt()) {

                var serviceProfessionalUserID = WebSecurity.CurrentUserId;
                var itemID = UrlData[0].AsInt();

                if (itemID == 0) {
                    // Not allowed
                    return base.Put();
                }

                // Update client by ID
                return SetClient(serviceProfessionalUserID, itemID);
            }

            // method not allowed
            return base.Put();
        }

        public override dynamic Delete()
        {
            if (UrlData.Count == 1 &&
                UrlData[0].IsInt()) {

                var serviceProfessionalUserID = WebSecurity.CurrentUserId;
                var itemID = UrlData[0].AsInt();

                // Get a copy before deletio to send later
                var item = LcRest.Client.GetServiceProfessionalClient(serviceProfessionalUserID, itemID);

                if (item == null) {
                    throw new HttpException(404, "[[[Not Found]]]");
                }

                // Delete
                LcRest.Client.Delete(serviceProfessionalUserID, itemID);

                return item;
            }

            // method not allowed
            return base.Delete();
        }

        private bool IsValidClient() {

            Validation.RequireField("firstName", LcRessources.RequiredField("First Name"));
            Validation.RequireField("lastName", LcRessources.RequiredField("Last Name"));
            //Validation.RequireField("email", LcRessources.RequiredField("Email"));
            // Allowing the 0 for unset values (is not a required field)
            Validation.Add("birthMonth", Validator.Range(0, 12, "[[[Birth Month must be a number between 1 and 12]]]"));
            // Allowing the 0 for unset values (is not a required field)
            Validation.Add("birthMonthDay", Validator.Range(0, 31, "[[[Birth Month Day must be a number between 1 and 31]]]"));
            Validation.Add("firstName", Validator.StringLength(50, 0, "[[[First Name must be fewer than 50 characters.]]]"));
            Validation.Add("lastName", Validator.StringLength(145, 0, "[[[Last Name must be fewer than 145 characters.]]]"));
            Validation.Add("secondLastName", Validator.StringLength(145, 0, "[[[Second Last Name must be fewer than 145 characters.]]]"));
            Validation.Add("email", Validator.Regex(LcValidators.EmailAddressRegexPattern, "[[[That e-mail is not valid]]]"));
           
            return Validation.IsValid() && ModelState.IsValid;
        }

        private LcRest.Client SetClient(int serviceProfessionalUserID, int clientUserID = 0) {
            // Validation
            var exists = clientUserID == 0 ? null : LcRest.Client.GetServiceProfessionalClient(serviceProfessionalUserID, clientUserID);
            if (exists != null && exists.editable && !IsValidClient()) {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }

            var client = GetClientFromForm();
            client.clientUserID = clientUserID;
            try
            {
                var locale = LcRest.Locale.Current;
                var itemID = LcRest.Client.SetClient(serviceProfessionalUserID, client, locale.languageID, locale.countryID);

                // If returned ID is zero rather than the provided one
                // is because the requested ID was not found.
                // (for cases of new, when passed ID is zero, the returned is the 
                // new generated ID, so is not zero if created successfully).
                if (itemID == 0) {
                    throw new HttpException(404, "[[[Not Found]]]");
                }

                // Returns the updated client data
                return LcRest.Client.GetServiceProfessionalClient(serviceProfessionalUserID, itemID);
            }
            catch (ValidationException ex) {
                ModelState.AddError(ex.ParamName, ex.Message);
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }
        }

        private LcRest.Client GetClientFromForm()
        {
            var client = new LcRest.Client {
                firstName = Request.Form["firstName"],
                lastName = Request.Form["lastName"],
                secondLastName = Request.Form["secondLastName"],
                email = Request.Form["email"],
                phone = Request.Form["phone"],
                canReceiveSms = Request.Form["canReceiveSms"].AsBool(),
                birthMonth = Request.Form["birthMonth"].AsInt(),
                birthMonthDay = Request.Form["birthMonthDay"].AsInt(),
                notesAboutClient = Request.Form["notesAboutClient"]
            };

            return client;
        }
    }
}
@{
    Response.RestRequiresUser(LcData.UserInfo.UserType.ServiceProfessional);
    new RestClients().JsonResponse(this);
}
