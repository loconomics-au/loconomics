@*
    Reading and updating the logged user Marketplace Profile.
    Internally, is a subset of profile fields specifically used on
    the marketplace public profile, most of them serviceProfessional specific.
    The API /profile does not include this information.

    Options:

    - GET: no params
    
    - PUT:
        publicBio:string Editable
        businessName:string Editable
        serviceProfessionalProfileUrlSlug:string Editable Desired URL slug/fragment for a custom URL belonging to loconomics.com.au
                                            The full URL generated, using this or the fallback, can be queried
                                            in the read-only serviceProfessionalProfileUrl property.
        serviceProfessionalWebsiteUrl:string Editable

    - @Result {
        userID:int Auto
        publicBio:string Editable
        businessName:string Editable
        serviceProfessionalProfileUrlSlug:string Editable
        serviceProfessionalProfileUrl:string Computed It's the complete loconomics.com.au custom URL using the serviceProfessionalProfileUrlSlug,
                                        or the standard URL Loconomics provides to the service professional if he/she has not choosen a slug.
        serviceProfessionalWebsiteUrl:string Editable
        bookCode:string Auto
        createdDate:datetime Auto
        updatedDate:datetime Auto
    }

    EXAMPLES {
        "Marketplace Profile (get and update)": {
            "url": "/api/v1/en-US/me/marketplace-profile",
            "get": { },
            "put": {
                "publicBio": "I have little to tell. That's all.",
                "businessName": "Great business name",
                "serviceProfessionalProfileUrlSlug": "my-custom-loconomics-url",
                "serviceProfessionalWebsiteUrl": "http://loconomics.com.au"
            }
        }
    }
*@
@functions{
    public class RestUserMarketplaceProfile : RestWebPage
    {
        private dynamic GetData()
        {
            return LcRest.MarketplaceProfile.Get(WebSecurity.CurrentUserId);
        }
        
        public override dynamic Get()
        {
            if (UrlData.Count > 0) {
                throw new HttpException(404, "[[[Not found]]]");
            }
            
 	        return GetData();
        }

        public override dynamic Put()
        {
            if (UrlData.Count > 0) {
                throw new HttpException(404, "[[[Not found]]]");
            }
            
            var userID = WebSecurity.CurrentUserId;
            
            // Validation
            Validation.Add("publicBio", Validator.StringLength(4000, 0, "[[[Public Bio must be fewer than 4000 characters]]]"));
            Validation.Add("businessName", Validator.StringLength(145, 0, "[[[Business name must be fewer than 145 characters]]]"));
            Validation.Add("serviceProfessionalProfileUrlSlug", Validator.Regex(@"^[a-zA-Z][\w\-]*$", "[[[The custom URL you've entered is invalid. Remember: just words and dashes, no white space, no slashes]]]"));
            // IMPORTANT: Limiting custom URL (that goes on top of loconomics.com.au/the-custom-url) to 80 characters as maximum
            // just to avoid excesive URLs that hide part of the loconomics.com.au. On database, the limit is excesive higher right now with 2078
            // as for regular, complete URLs, but since this is buil on top on our URL is better to keep it too much shorter.
            Validation.Add("serviceProfessionalProfileUrlSlug", Validator.StringLength(80, 0, "[[[The custom URL is too long, please keep it under 80 characters.]]]"));
            
            // Automatically add http:// if users doesn't put a protocol on its website url. Before validation!
            var webUrl = Request.Form["serviceProfessionalWebsiteUrl"];
            if (!String.IsNullOrEmpty(webUrl)) {
                if (!webUrl.StartsWith("http")) {
                    webUrl = "http://" + webUrl;
                }
                if (!LcValidators.IsUrl(webUrl)) {
                    ModelState.AddError("serviceProfessionalWebsiteUrl", "[[[The Website URL is not valid, check that is complete]]]");
                }
                else if (webUrl.Length > 2000) {
                    // IMPORTANT: Limiting URL length to 2000 characters as maximum. On database, it slightly higher with 2078,
                    // but a great StackOverflow research post recommends 2000 as limit
                    // (http://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers)
                    ModelState.AddError("serviceProfessionalWebsiteUrl", "[[[The Website URL is too long, please keep it under 2000 characters.]]]");
                }
            }
            
            // First validation check
            if (!Validation.IsValid() || !ModelState.IsValid) {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }
            
            // Check on database that the requested profile URL is available
            // NOTE: more expensive check, and irrelevant on previous validation errors, so is done
            // after the first check
            var profileUrlSlug = (Request.Form["serviceProfessionalProfileUrlSlug"] ?? "").Trim();
            if (!LcRest.MarketplaceProfile.IsProfileUrlAvailable(userID, profileUrlSlug)) {
                ModelState.AddError("serviceProfessionalProfileUrlSlug", "[[[We're sorry, that custom URL is unavailable, please choose other.]]]");
            }

            // Second validation check: just, there are errros?
            if (!ModelState.IsValid) {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }

            // Parameters
            var profile = new LcRest.MarketplaceProfile {
                userID = userID,
                publicBio = Request.Form["publicBio"],
                businessName = Request.Form["businessName"],
                serviceProfessionalProfileUrlSlug = profileUrlSlug,
                serviceProfessionalWebsiteUrl = webUrl
            };

            // Update!
            LcRest.MarketplaceProfile.Set(profile);
            
            return GetData();
        }
    }
}
@{   
    Response.RestRequiresUser(LcData.UserInfo.UserType.User);
    new RestUserMarketplaceProfile().JsonResponse(this);
}
