@*
    DEPRECATED/OBSOLETE Not used at the App since #5fdd225aa and per new logic as of #801 makes no sense
    to access individual job title data with an API like this. The more relevant info was the singularName,
    now accessed as userListing.title, and the pricingTypes, now more optimal and convenient through 
    the pricing-types/job-title API.

    Retrieving the Job Title information for a single record.

    Options:

    - GET /@id
        Returns a JobTitle record

    Structures
    - JobTitle {
        "jobTitleID":int,
        "singularName":string,
        "pluralName":string,
        "aliases":string,
        "description":string,
        "searchDescription":string,
        "createdDate":Date,
        "updatedDate":Date,
        "pricingTypes":[
            {
                "pricingTypeID":int,
                "createdDate":Date,
                "updatedDate":Date
            }
        ]
    }

    EXAMPLES {
        "Job Titles (item) [DEPRECATED]": {
            "url": "/api/v1/en-US/job-titles/106",
            "get": { }
        }
    }
*@
@functions{
    [Obsolete("Unused at App and unneeded per related API changes, keep for a while just to let older App versions to update")]
    public class RestJobTitles : RestWebPage
    {
        public override dynamic Get()
        {
            if (UrlData[0].IsInt())
            {
                var id = UrlData[0].AsInt(0);

                var item = LcRest.PublicJobTitle.Get(id, LcRest.Locale.Current);

                if (item != null)
                    return item;
                else
                    throw new HttpException(404, "[[[Job Title not found.]]]");
            }

            throw new HttpException(404, "[[[Not Found]]]");
        }
    }
}
@{
    new RestJobTitles().JsonResponse(this);
}
