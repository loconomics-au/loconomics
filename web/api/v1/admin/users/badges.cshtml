@using WebMatrix.WebData;
@*
    Admin access to users badges.

    Options:

    - GET /
      List all non removed user badges

    - GET /@userBadgeID
      Get badge record by ID

    - POST /
      Insert or update an user badge

    EXAMPLES {
        "Admin user badges (list and create)": {
            "url": "/api/v1/en-US/admin/users/141",
            "get": {},
            "post": {
                "badgeURL": "https://badgr.io/assertions/asdf?v=2",
                "type": "badge",
                "category": "general",
                "solutionID": null,
                "expiryDate": "2020-01-01T01:01:01Z"
            }
        },
        "Admin user badges (item by userBadgeID)": {
            "url": "/api/v1/en-US/admin/users/141/2",
            "get": {},
            "put": {
                "badgeURL": "https://badgr.io/assertions/asdf?v=2",
                "type": "badge",
                "category": "general",
                "solutionID": null,
                "expiryDate": "2020-01-01T01:01:01Z"
            }
        }
    }
*@
@functions{
    public class RestUserProfile : RestWebPage
    {
        public override dynamic Get()
        {
            var userID = this.WebPage.Context.GetRouteValue("userID").AsInt(0);
            if (userID <= 0)
            {
                throw new HttpException(404, "User Not Found");
            }

            var locale = LcRest.Locale.Current;
            if (UrlData.Count == 1 && UrlData[0].IsInt())
            {
                return LcRest.UserBadge.Get(userID, UrlData[0].AsInt(), locale.languageID, locale.countryID);
            }
            else if (UrlData.Count == 0)
            {
                return LcRest.UserBadge.ListAllByUser(userID, locale.languageID, locale.countryID);
            }
            else
            {
                return base.Get();
            }
        }

        public override dynamic Post()
        {
            if (UrlData.Count == 0)
            {
                var userID = WebPage.Context.GetRouteValue("userID").AsInt(0);
                // Create
                return SetItem(userID);
            }

            return base.Post();
        }

        public override dynamic Put()
        {
            if (UrlData.Count == 1 && UrlData[0].IsInt())
            {
                var userID = WebPage.Context.GetRouteValue("userID").AsInt(0);
                var itemID = UrlData[0].AsInt();

                if (itemID > 0)
                {
                    return SetItem(userID, itemID);
                }
            }
            return base.Put();
        }

        public override dynamic Delete()
        {
            if (UrlData.Count == 1 && UrlData[0].IsInt())
            {
                var userID = WebPage.Context.GetRouteValue("userID").AsInt(0);
                var itemID = UrlData[0].AsInt();
                var locale = LcRest.Locale.Current;

                // Get a copy before deletion to send later
                var item = LcRest.UserBadge.Get(userID, itemID, locale.languageID, locale.countryID);

                if (item == null)
                {
                    throw new HttpException(404, "Not Found");
                }

                // Delete
                LcRest.UserBadge.Delete(userID, itemID, locale.languageID, locale.countryID, true);

                return item;
            }

            return base.Delete();
        }

        private bool IsValid()
        {
            Validation.RequireField("userID", LcRessources.RequiredField("User"));
            Validation.RequireField("badgeURL", LcRessources.RequiredField("Badge URL"));
            Validation.Add("badgeURL", Validator.Url(LcRessources.RequiredField("Badge URL")));
            Validation.RequireField("type", LcRessources.RequiredField("Type"));
            var type = Request.Form["type"];
            if (type != "badge" && type != "collection")
            {
                ModelState.AddError("type", LcRessources.RequiredField("Type"));
            }
            Validation.RequireField("category", LcRessources.RequiredField("Category"));
            Validation.Add("expiryDate", Validator.DateTime("Invalid expiry date"));

            return Validation.IsValid() && ModelState.IsValid;
        }

        private LcRest.UserBadge SetItem(int userID, int itemID = 0)
        {
            // Validation
            if (!IsValid())
            {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }

            var item = GetItemFromForm();
            item.userID = userID;
            item.userBadgeID = itemID;
            item.createdBy = WebSecurity.CurrentUserId.ToString();
            item.modifiedBy = WebSecurity.CurrentUserId.ToString();
            var locale = LcRest.Locale.Current;

            item.userBadgeID = LcRest.UserBadge.Set(item, locale);

            // Returns the updated client data
            return LcRest.UserBadge.Get(userID, item.userBadgeID, locale.languageID, locale.countryID);
        }

        private LcRest.UserBadge GetItemFromForm()
        {
            return new LcRest.UserBadge
            {
                badgeURL = Request.Form["badgeURL"],
                solutionID = Request.Form["solutionID"].IsInt() ? (int?)Request.Form["solutionID"].AsInt() : null,
                type = Request.Form["type"],
                category = Request.Form["category"],
                expiryDate = RestWebPage.DateTimeOffsetFromISO(Request.Form["expiryDate"])
            };
        }
    }
}
@{
    Response.RestRequiresUser(LcData.UserInfo.UserType.Admin);
    new RestUserProfile().JsonResponse(this);
}
