@**
    Search API.
    
    It performs a search of job titles, service professionals, and/or categories by Search Term, Job Title ID, or Category ID within 30 miles of a user's location.

    TODO: complete docs

    Options:

    GET /
        Returns SearchResults[]

    TODO: job-titles by subcategory. Example:
    /* TODO: Add ServiceSubCategoryPositionTable to db, and test query in JobTitleSearchResult.cs       
    "Search Job Titles by SubCategoryID": {
        "url": "/api/v1/en-US/search/job-titles/by-subcategory",
        "get": {
            "serviceSubCategoryID": "1",
            "origLat": "37.788479",
            "origLong": "-122.40297199999998",
            "searchDistance": "30"
        }
    },*/

    EXAMPLES {
        
        "Search Job Titles, Service Professionals, and Categories by Search Term and Location": {
            "url": "/api/v1/en-US/search",
            "get": {
                "searchTerm": "cleaner",
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },       

        "Search Service Professionals by Search Term and Location": {
            "url": "/api/v1/en-US/search/service-professionals",
            "get": {
                "searchTerm": "Joshua",
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },

        "Search Service Professionals by Job TitleID and Location": {
            "url": "/api/v1/en-US/search/service-professionals/by-job-title",
            "get": {
                "jobTitleID": "106",
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },

        "Search Job Titles Autocomplete by Search Term": {
            "url": "/api/v1/en-US/search/job-titles/autocomplete",
            "get": {
                "searchTerm": "cleaner"
            }
        },

        "Search Job Titles by Search Term and Location": {
            "url": "/api/v1/en-US/search/job-titles",
            "get": {
                "searchTerm": "cleaner",
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },
        
        "Search Job Title info by jobTitleID and Location": {
            "url": "/api/v1/en-US/search/job-titles/106",
            "get": {
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },

        "Search Job Titles by CategoryID and Location": {
            "url": "/api/v1/en-US/search/job-titles/by-category",
            "get": {
                "categoryID": "1",
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },

        
        "Search Categories by Search Term and Location": {
            "url": "/api/v1/en-US/search/categories",
            "get": {
                "searchTerm": "home",
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },   
        
        "Search Category info by CategoryID and Location": {
            "url": "/api/v1/en-US/search/categories/1",
            "get": {
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        }
}
**@
@functions{
    public class RestSearch : RestWebPage
    {
        public override dynamic Get()
        {
            // JUST global search
            // /search
            if (UrlData.Count == 0)
            {
                var s = Request["searchTerm"];
                var lat = Request["origLat"].AsDecimal();
                var lng = Request["origLong"].AsDecimal();
                var dist = Request["searchDistance"].AsInt();
                return LcRest.Search.Get(s, lat, lng, dist, LcRest.Locale.Current);
            }
            else
            {
                // SPECIFIC searches, organized by URL sub-segments

                // switch-case is like  if(UrlData[0] == "xx") else if (UrlData[0] == "yy")
                // but enforced to check UrlData[0] in all 'cases' so we know we are just checking the first segment
                // (to avoid mix different criterias in the first level check)
                switch (UrlData[0])
                {
                    // /search/service-professionals**
                    case "service-professionals":
                    {
                        var visibility = WebSecurity.IsAuthenticated ? LcRest.ServiceProfessionalService.Visibility.BookableByClient(WebSecurity.CurrentUserId)
                                                                        : LcRest.ServiceProfessionalService.Visibility.BookableByPublic();

                        // search/service-professionals
                        if (UrlData.Count == 1) {
                            var s = Request["searchTerm"];
                            var lat = Request["origLat"].AsDecimal();
                            var lng = Request["origLong"].AsDecimal();
                            var dist = Request["searchDistance"].AsInt();
                            return LcRest.ServiceProfessionalSearchResult.SearchBySearchTerm(s, lat, lng, dist, LcRest.Locale.Current, visibility);
                        }
                        // /search/service-professionals/by-job-title
                        else if (UrlData.Count == 2 && UrlData[1] == "by-job-title")
                        {
                            var j = Request["jobTitleID"].AsInt();
                            var lat = Request["origLat"].AsDecimal();
                            var lng = Request["origLong"].AsDecimal();
                            var dist = Request["searchDistance"].AsInt();
                            return LcRest.ServiceProfessionalSearchResult.SearchByJobTitleID(j, lat, lng, dist, LcRest.Locale.Current, visibility);
                        }
                        break;
                    }
                   
                    // /search/job-titles**
                    case "job-titles":
                    {
                        // /search/job-titles
                        if (UrlData.Count == 1) {
                            var s = Request["searchTerm"];
                            var lat = Request["origLat"].AsDecimal();
                            var lng = Request["origLong"].AsDecimal();
                            var dist = Request["searchDistance"].AsInt();
                            return LcRest.JobTitleSearchResult.SearchBySearchTerm(s, lat, lng, dist, LcRest.Locale.Current);
                        }
                        // /search/job-titles/{jobTitleID} (where {jobTitleID} is an integer)
                        if (UrlData.Count == 2 && UrlData[1].IsInt())
                        {
                            var j = UrlData[1].AsInt();
                            var lat = Request["origLat"].AsDecimal();
                            var lng = Request["origLong"].AsDecimal();
                            var dist = Request["searchDistance"].AsInt();
                            return LcRest.JobTitleSearchResult.SearchByJobTitleID(j, lat, lng, dist, LcRest.Locale.Current);
                        }
                        // /search/job-titles/by-category
                        else if (UrlData.Count == 2 && UrlData[1] == "by-category")
                        {
                            var s = Request["categoryID"].AsInt();
                            var lat = Request["origLat"].AsDecimal();
                            var lng = Request["origLong"].AsDecimal();
                            var dist = Request["searchDistance"].AsInt();
                            return LcRest.JobTitleSearchResult.SearchByCategoryID(s, lat, lng, dist, LcRest.Locale.Current);
                        }
                        // /search/job-titles/autocomplete
                        else if (UrlData.Count == 2 && UrlData[1] == "autocomplete")
                        {
                            var s = Request["searchTerm"];
                            return LcRest.JobTitleSearchResult.SearchByJobTitleAutocomplete(s, LcRest.Locale.Current);
                        }
                        break;
                    }
                    // /search/categories**
                    case "categories":
                    {
                        // /search/categories
                        if (UrlData.Count == 1) {
                            var s = Request["searchTerm"];
                            var lat = Request["origLat"].AsDecimal();
                            var lng = Request["origLong"].AsDecimal();
                            var dist = Request["searchDistance"].AsInt();
                            return LcRest.CategorySearchResult.SearchBySearchTerm(s, lat, lng, dist, LcRest.Locale.Current);
                        }
                        // /search/categories/{categoryID} (where {categoryID} is an integer)
                        else if (UrlData.Count == 2 && UrlData[1].IsInt())
                        {
                            var j = UrlData[1].AsInt();
                            var lat = Request["origLat"].AsDecimal();
                            var lng = Request["origLong"].AsDecimal();
                            var dist = Request["searchDistance"].AsInt();
                            return LcRest.CategorySearchResult.SearchByCategoryID(j, lat, lng, dist, LcRest.Locale.Current);
                        }
                        break;
                    }
                }
            }
            return new HttpException(404, "[[[Not found]]]");
        }
    }
}
@{
    // Public access
    new RestSearch().JsonResponse(this);
}