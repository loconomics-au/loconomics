@using WebMatrix.WebData;
@**
    Lead Generation: Newsletter API.
    
    It lets anonymous users to subscribe to Loconomics newsletter, getting registered as a user
    without enabled account.

    ## REST API
    POST /lead-generation/newsletter/subscribe
    - email:string
    - isServiceProfessional:boolean

    ## Restrictions
    - Only available to anonymous users (UI should prevent allowing this request to logged users)
    - All input data is required
    - Validate email format
    - Email does not exists

    ## Storage
    At [userprofile]:
    - userID: [auto]
    - email: data.email

    At [users]:
    - userID: userprofile.userID
    - isServiceProfessional: data.isServiceProfessional
    - isClient: true
    - accountStatusID: -1
    - loconomicsMarketingCampaigns: true
    - firstName: ''
    - middleIn: ''
    - lastName: ''
    - secondLastNme: ''
    - marketingSource: context.url.queryString + '&lead-generation=newsletter'
    - preferredLanguageID: context.locale.languageID
    - preferredCountryID: context.locale.countryID
    - createdDate: DateTime.Now
    - updatedDate: DateTime.Now
    - active: true

    ## Result
    "OK"

    ## Triggers
    - Send e-mail "Subscribed to Loconomics newsletter"

    ## EXAMPLES {
        "Lead Generation: subscribe to newsletter": {
            "url": "/api/v1/en-US/lead-generation/newsletter/subscribe",
            "post": {
                "email": "user@test.one",
                "isServiceProfessional": true
            }
        }
    }
**@
@functions{
    public class RestLeadGenerationNewsletter : RestWebPage
    {
        public override dynamic Post()
        {
            if (UrlData.Count == 1 && UrlData[0] == "subscribe")
            {
                if (WebSecurity.IsAuthenticated)
                {
                    throw new HttpException(400, "[[[You are already logged in! Review your account preferences to enable the newsletter.]]]");
                }
                Validation.RequireField("email", LcRessources.RequiredField("E-mail"));
                Validation.Add("email",
                    Validator.Regex(LcValidators.EmailAddressRegexPattern, "[[[The email is not valid.]]]"));
                if (!Request.Form["isServiceProfessional"].IsBool())
                {
                    ModelState.AddError("isServiceProfessional", "[[[Is required to indicate whether is service professional or not]]]");
                }
                if (Validation.IsValid() && ModelState.IsValid)
                {
                    var email = Request.Form["email"];
                    var isServiceProfessional = Request.Form["isServiceProfessional"].AsBool();
                    var marketingSource = Request.Url.Query;
                    var additionalSource = "&lead-generation=newsletter";
                    marketingSource = (marketingSource ?? "") + additionalSource;
                    var userID = LcRest.LeadGeneration.SubscribeNewUser(email, isServiceProfessional, marketingSource, LcRest.Locale.Current);
                    if (userID > 0)
                    {
                        //LcMessaging.SendNewsletterSubscription(userID, email);
                        return "OK";
                    }
                    else
                    {
                        throw new HttpException(500, "[[[Subscription failed]]]");
                    }
                }
                else
                {
                    throw new HttpException(400, LcRessources.ValidationSummaryTitle);
                }
            }
            return base.Post();
        }
    }
    }
@{
    // Public access
    new RestLeadGenerationNewsletter().JsonResponse(this);
}