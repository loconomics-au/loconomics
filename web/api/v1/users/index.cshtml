@using WebMatrix.WebData;
@*
    Fetchs a summary of the public user profile.
    Returned object includes data from different APIs available also individually
    on its own endpoints that follows the same (or adapted) name as the property
    where they are included.
    For information on the returned format of each one, check out each individual API.
    The result includes: profile, rating, verificationsSummary, jobProfile (only on freelancers,
    and extended with properties rating and verificationsSummary to get that specific info
    for the job title).

    IMPORTANT: this API is expected to be reach under the URL ~/users/{userID}
    not using the trailing '/index'.

    Options:
    
    - GET /
        - includeFullJobTitleID:int (Optional) Set a jobTitleID to get it's object under jobProfile expanded with
            all the public data related: services, serviceAddresses, serviceAttributes, workPhotos (as usually displayed in the profile page)
            A special value of 0 or nothing will include nothing, while the special value -1 means 'all job titles'.
            If the API caller is the owner of the profile, all job titles are returned.
        @returns {
            profile: {}, // like /users/{userID}/profile
            rating: {}, // like /users/{userID}/rating
            verificationsSummary: {}, // like /users/{userID}/verifications-summary
            jobProfile: [{}], // like /users/{userID}/jobProfile BUT extended with rating and verificationsSummary
            stats: {},
            education: [{}]
        }

    EXAMPLES {
        "Public user profile summary": {
            "url": "/api/v1/en-US/users/141",
            "get": {}
        }
    }
*@
@functions{
    public class RestUserProfileSummary : RestWebPage
    {
        public override dynamic Get()
        {
            var userID = this.WebPage.Context.GetRouteValue("userID").AsInt(0);
            if (userID <= 0)
            {
                throw new HttpException(404, "[[[User Not Found]]]");
            }

            var includeFullJobTitleID = Request.QueryString["includeFullJobTitleID"].AsInt(0);

            var profile = LcRest.PublicUserProfile.Get(userID, WebSecurity.CurrentUserId);
            if (profile == null)
                throw new HttpException(404, "[[[User Not Found]]]");

            // when service professional, gets only job-titles related rating (-2), otherwise client rating only (0)
            var rating = LcRest.PublicUserRating.Get(userID, profile.isServiceProfessional ? -2 : 0);

            var verificationsSummary = LcRest.PublicUserVerificationsSummary.Get(userID, profile.isServiceProfessional ? -2 : 0);

            var locale = LcRest.Locale.Current;

            var jobProfile = profile.isServiceProfessional ? GetJobProfile(WebSecurity.CurrentUserId, userID) : null;

            var extendedJobProfile = jobProfile == null ? null : jobProfile.Select(x =>
            {
                var full = includeFullJobTitleID == x.jobTitleID || includeFullJobTitleID == -1;
                var servicesVisibility = WebSecurity.IsAuthenticated ? LcRest.ServiceProfessionalService.Visibility.BookableByClient(WebSecurity.CurrentUserId)
                                                                     : LcRest.ServiceProfessionalService.Visibility.BookableByPublic();
                return new {
                    userID = x.userID,
                    jobTitleID = x.jobTitleID,
                    title = x.title,
                    intro = x.intro,
                    cancellationPolicyID = x.cancellationPolicyID,
                    instantBooking = x.instantBooking,
                    isActive = x.isActive,
                    jobTitleSingularName = x.title,
                    jobTitlePluralName = x.title,
                    rating = LcRest.PublicUserRating.Get(userID, x.jobTitleID),
                    verificationsSummary = LcRest.PublicUserVerificationsSummary.Get(userID, x.jobTitleID),
                    serviceAddresses = full ? LcRest.Address.GetServiceAddresses(userID, x.jobTitleID) : null,
                    services = full ? LcRest.ServiceProfessionalService.GetList(userID, x.jobTitleID, clientVisibility: servicesVisibility) : null,
                    serviceAttributes = full ? LcRest.PublicUserJobTitleServiceAttributes.Get(userID, x.jobTitleID, locale.languageID, locale.countryID) : null,
                    workPhotos = full ? LcData.Photo.GetUserWorkPhotos(userID, x.jobTitleID) : null,
                    verifications = full ? LcRest.PublicUserVerification.GetList(userID, x.jobTitleID) : null,
                    licensesCertifications = full ? LcRest.PublicUserLicenseCertification.GetList(userID, x.jobTitleID, locale.languageID) : null,
                    badges = full ? LcRest.UserBadge.ListByListing(userID, x.jobTitleID, locale.languageID, locale.countryID, true) : null
                };
            });

            return new {
                profile = profile,
                rating = rating,
                verificationsSummary = verificationsSummary,
                verifications = LcRest.PublicUserVerification.GetList(userID, 0),
                jobProfile = extendedJobProfile,
                stats = LcRest.PublicUserStats.Get(userID),
                education = LcRest.Education.GetList(userID),
                weeklySchedule = LcCalendar.GetAvailability.WeeklySchedule(userID),
                schedulingPreferences = LcCalendar.GetSchedulingPreferences(userID)
            };
        }

        /// <summary>
        /// Fetches list of public user job titles for the service professional. 
        /// 
        /// If the ID of the caller matches the service professional, then it will
        /// return all job titles, even those that aren't publicly active.
        /// </summary>
        /// <param name="callerUserID">ID of the caller</param>
        /// <param name="serviceProfessionalID">ID of the user with a job profile</param>
        /// <returns></returns>
        private static IEnumerable<LcRest.PublicUserJobTitle> GetJobProfile(int callerUserID, int serviceProfessionalID)
        {
            // If professional is fetching their own profile, show all job titles
            var jobTitles = callerUserID == serviceProfessionalID ? LcRest.UserJobTitle.GetAllByUser(serviceProfessionalID) :
                                                                    LcRest.UserJobTitle.GetActiveByUser(serviceProfessionalID);

            return jobTitles.Select(LcRest.PublicUserJobTitle.FromUserJobTitle);
        }
    }
}
@{
    new RestUserProfileSummary().JsonResponse(this);
}
