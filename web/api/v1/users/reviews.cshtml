@using WebMatrix.WebData;
@*
    Fetchs public reviews made by other users about this one.

    Options:
    
    - GET /
        Get the most recent reviews as customer, performed by service professionals
        - limit:int Default:20. Sets the maximum amount of threads to include in the results.
        - untilID:int Default:null. Ask for the inmediate older reviews than the given bookingID. The review for that ID is not included in the results.
        - sinceID:int Default:null. Ask for the inmediate newer reviews than the given bookingID. The review for that ID is not included in the results.
        
    - GET /{jobTitleID}
        Get the most recent reviews as service professionals, reviewed by its clients for the given Job Title
        - limit:int Default:20. Sets the maximum amount of threads to include in the results.
        - untilID:int Default:null. Ask for the inmediate older reviews than the given bookingID. The review for that ID is not included in the results.
        - sinceID:int Default:null. Ask for the inmediate newer reviews than the given bookingID. The review for that ID is not included in the results.
        
    EXAMPLES {
        "User Public Reviews as Customer": {
            "url": "/api/v1/en-US/users/141/reviews",
            "get": {
                "limit": 20,
                "until": null,
                "since": "2012-04-17T08:08:17.44Z"
            }
        },
        "User Public Reviews as Service Professional per Job Title": {
            "url": "/api/v1/en-US/users/141/reviews/106",
            "get": {
                "limit": 20,
                "until": null,
                "since": "2012-04-17T08:08:17.44Z"
            }
        }
    }
*@
@functions{
    public class RestUserReviews : RestWebPage
    {
        public override dynamic Get()
        {
            var userID = this.WebPage.Context.GetRouteValue("userID").AsInt(0);
            if (userID <= 0)
            {
                throw new HttpException(404, "[[[User Not Found]]]");
            }
            if (UrlData.Count <= 1) {
                var jobTitleID = UrlData[0].AsInt(0);
                var limit = Request["limit"].AsInt(20);
                var messagesLimit = Request["messagesLimit"].AsInt(1);
                var until = DateTimeOffsetFromISO(Request["until"]);
                var since = DateTimeOffsetFromISO(Request["since"]);

                var data = LcRest.PublicUserReview.GetList(userID, jobTitleID, limit, since, until);
                if (data == null)
                    throw new HttpException(404, "[[[User Not Found]]]");
                return data;
            }
            return base.Get();
        }
    }
}
@{
    new RestUserReviews().JsonResponse(this);
}
