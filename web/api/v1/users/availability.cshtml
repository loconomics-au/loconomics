@using WebMatrix.WebData;
@*
    Fetchs user availability, times the service professional is available to be booked.

    Options:
    
    - GET /times
        It returns the calendar availability by date ranges of variable size, with startTime, endTime
        and availability of the time range/slot.
        It includes extra properties with relevant information about the user schedule.

        @params {
            start:isodatetime (Optional) Beggining of the times range returned. By default, "today".
            end:isodatetime (Optional) Ending of the times range returned. By default, "tomorrow".
        }

        @result {
            "incrementsSizeInMinutes":int the user choosen precision to pick times, in blocks of the given size
                (rounded to that). Consumers must split the given date ranges to show them in blocks of this size,
                the server can block any attempt to request a datetime that does not match that precision when
                booking the user.
            "slots": [{
                startTime:datetime,
                endTime:datetime,
                availability:string [free, busy, unavailable, tentative]
            }]
        }

    EXAMPLES {
        "User Availability at times detail": {
            "url": "/api/v1/en-US/users/141/availability/times",
            "get": {
                "start": "2016-08-01T22:00:00Z",
                "end": "2016-08-30T22:00:00Z"
            }
        }
    }
*@
@functions{
    public class RestUserAvailability : RestWebPage
    {
        public override dynamic Get()
        {
            var userID = this.WebPage.Context.GetRouteValue("userID").AsInt(0);
            if (userID <= 0)
            {
                throw new HttpException(404, "[[[User Not Found]]]");
            }
            
            var startDate = DateTimeOffsetFromISO(Request["start"]) ?? DateTime.Today;
            var endDate = DateTimeOffsetFromISO(Request["end"]) ?? DateTime.Today.AddDays(1);
            
            if (UrlData[0] == "times") {
                // Important: If the request is performed by the user that owns that userID, it
                // means is a professional requesting it's own availability, usually in order to
                // do a service-professional booking, then we must avoid the AdvanceTime since
                // is a limitation only for clients
                // By default, true for anonymous users (potential clients)
                var useAdvanceTime = true;
                if (WebSecurity.HasUserId) {
                    useAdvanceTime = WebSecurity.CurrentUserId != userID;
                }
                return LcCalendar.GetAvailability.Times(userID, startDate, endDate, useAdvanceTime);
            }
            
            throw new HttpException(404, "[[[User Not Found]]]");
        }
    }
}
@{
    new RestUserAvailability().JsonResponse(this);
}
