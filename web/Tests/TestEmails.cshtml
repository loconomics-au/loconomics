@*
    Manual test generation of emails from templates.
    See TestMessaging to try generation and sending of emails and combinations of bookings type/statuses
*@
@{
    LcHelpers.TestArea();
    Layout = "_TestLayout.cshtml";

    if (IsPost)
    {
        var url = Request["url"].Replace(LcUrl.SiteUrl, "");
        LcMessaging.SendMail(Request["email"], "Testing Email " + url, LcMessaging.ApplyTemplate(url, null));
    }

    var list = new Dictionary<string, List<string>>{
        { "[needs review] EmailInquiry", new List<string> {
            "Email/EmailInquiry/?ThreadID=13&MessageID=26&Kind=-1&RequestKey=abcd3&EmailTo=iagosrl@gmail.com"
            ,"Email/EmailInquiry/?ThreadID=13&MessageID=26&Kind=2&RequestKey=abcd3&EmailTo=iagosrl@gmail.com"} }
        ,{ "[needs review] EmailProviderReference", new List<string> { "Email/EmailProviderReference/?UserID=141&PositionID=14&RequestKey=abcd3&EmailTo=iagosrl@gmail.com" } }

        ,{ "Welcome", new List<string> {
            "EmailCommunications/Admin/ToClient/Welcome?UserID=22&RequestKey=abcd3"
            ,"EmailCommunications/Admin/ToServiceProfessional/Welcome?UserID=6&RequestKey=abcd3"
        } }
        ,{ "ResetPassword", new List<string> {
            "EmailCommunications/Admin/ToUser/ResetPassword?UserID=6&passwordResetToken=abcd1&RequestKey=abcd3"
        } }
        ,{ "GIG Posting", new List<string> {
            "EmailCommunications/Admin/ToServiceProfessional/SuggestedPosting?UserID=6&userPostingID=1&RequestKey=abcd3"
            ,"EmailCommunications/Admin/ToClient/PostingApplication?UserID=14&userPostingID=1&serviceProfessionalUserID=6&RequestKey=abcd3"
        } }
        ,{ "Admin/ToServiceProfessional (remaining templates)", new List<string> {
            "EmailCommunications/Admin/ToServiceProfessional/BackgroundCheckRequestReceived?UserID=6&RequestKey=abcd3"
            ,"EmailCommunications/Admin/ToServiceProfessional/OptionalCertificationVerificationRequestReceived?UserID=6&jobTitleID=76&RequestKey=abcd3"
            ,"EmailCommunications/Admin/ToServiceProfessional/OwnerInvitation?UserID=6&RequestKey=abcd3"
            ,"EmailCommunications/Admin/ToServiceProfessional/RequiredLicenseVerificationRequestReceived?UserID=6&jobTitleID=76&RequestKey=abcd3"
            ,"EmailCommunications/Admin/ToServiceProfessional/EarningsEntryReminder?UserID=6&jobTitleID=76&RequestKey=abcd3"
        } }

        ,{ "Admin/Internal", new List<string> {
            "EmailCommunications/Admin/Internal/EmailBackgroundCheckRequest/?userID=6&jobTitleID=76&backgroundCheckID=1&RequestKey=abcd3"
            ,"EmailCommunications/Admin/Internal/EmailLicenseVerificationRequest/?userID=1&jobTitleID=106&licenseCertificationID=17&RequestKey=abcd3"
            ,"EmailCommunications/Admin/Internal/EmailProviderPaymentAccountNotification/?userID=141&RequestKey=abcd3"
            ,"EmailCommunications/Admin/Internal/EmailReportUnauthorizedUse/?ReportedUserID=22&ReportedByUserID=6&Message=Reporting+some+problem&RequestKey=abcd3"
        } }
    };

    // Booking Template Names for new EmailCommunications
    var bookingBookNowClient = new string[] {
        "BookingCancelledByClient",
        "BookingCancelledByServiceProfessional",
        "BookingCompleted",
        "BookingReminder",
        "BookingRequestConfirmed",
        "BookingRequestDeclined",
        "BookingRequestExpired",
        "BookingRequestSummary",
        "BookingUpdatedByClient",
        "BookingUpdatedByServiceProfessional",
        "InstantBookingConfirmed",
        "RequestToReviewReminder"
    };
    var bookingBookNowServiceProfessional = new string[] {
        "BookingCancelledByClient",
        "BookingCompleted",
        "BookingReminder",
        "BookingRequestConfirmed",
        "BookingRequestExpired",
        "BookingRequestSummary",
        "BookingUpdatedByClient",
        "BookingUpdatedByServiceProfessional",
        "InstantBookingConfirmed"
    };
    var bookingMarketplaceClient = new string[] {
        "BookingCancelledByClient",
        "BookingCancelledByServiceProfessional",
        "BookingCompleted",
        "BookingReminder",
        "BookingRequestConfirmed",
        "BookingRequestDeclined",
        "BookingRequestExpired",
        "BookingRequestSummary",
        "BookingUpdatedByClient",
        "BookingUpdatedByServiceProfessional",
        "InstantBookingConfirmed",
        "RequestToReviewReminder"
    };
    var bookingMarketplaceServiceProfessional = new string[] {
        "BookingCancelledByClient",
        "BookingCompleted",
        "BookingReminder",
        "BookingRequestConfirmed",
        "BookingRequestExpired",
        "BookingRequestSummary",
        "BookingUpdatedByClient",
        "BookingUpdatedByServiceProfessional",
        "InstantBookingConfirmed",
        "RequestToReviewReminder"
    };
    var bookingServiceProfessionalBookingClient = new string[] {
        "BookingCancelledByClient",
        "BookingCancelledByServiceProfessional",
        "BookingCompleted",
        "BookingReminder",
        "BookingUpdatedByClient",
        "BookingUpdatedByServiceProfessional",
        "InstantBookingConfirmed",
        "RequestToReviewReminder"
    };
    var bookingServiceProfessionalBookingServiceProfessional = new string[] {
        "BookingCancelledByClient",
        "BookingUpdatedByClient"
    };
    // Add Booking URLs
    var testBookingID = Request["BookingID"].AsInt(628);
    var isHipaa = Request["hipaa"].AsBool();
    var bookingList = new Dictionary<string, List<string>> ();
    bookingList.Add("BOOKING: BookNow ToClient",
        bookingBookNowClient.Select(x => "EmailCommunications/Booking/BookNow/ToClient/" + x + (isHipaa ? "HIPAA" : "") + "?RequestKey=abcd3&BookingID=" + testBookingID).ToList());
    bookingList.Add("BOOKING: BookNow ToServiceProfessional",
        bookingBookNowServiceProfessional.Select(x => "EmailCommunications/Booking/BookNow/ToServiceProfessional/" + x + (isHipaa ? "HIPAA" : "") + "?RequestKey=abcd3&BookingID=" + testBookingID).ToList());
    bookingList.Add("BOOKING: Marketplace ToClient",
        bookingMarketplaceClient.Select(x => "EmailCommunications/Booking/Marketplace/ToClient/" + x + (isHipaa ? "HIPAA" : "") + "?RequestKey=abcd3&BookingID=" + testBookingID).ToList());
    bookingList.Add("BOOKING: Marketplace ToServiceProfessional",
        bookingMarketplaceServiceProfessional.Select(x => "EmailCommunications/Booking/Marketplace/ToServiceProfessional/" + x + (isHipaa ? "HIPAA" : "") + "?RequestKey=abcd3&BookingID=" + testBookingID).ToList());
    bookingList.Add("BOOKING: ServiceProfessionalBooking ToClient",
        bookingServiceProfessionalBookingClient.Select(x => "EmailCommunications/Booking/ServiceProfessionalBooking/ToClient/" + x + (isHipaa ? "HIPAA" : "") + "?RequestKey=abcd3&BookingID=" + testBookingID).ToList());
    bookingList.Add("BOOKING: ServiceProfessionalBooking ToServiceProfessional",
        bookingServiceProfessionalBookingServiceProfessional.Select(x => "EmailCommunications/Booking/ServiceProfessionalBooking/ToServiceProfessional/" + x + (isHipaa ? "HIPAA" : "") + "?RequestKey=abcd3&BookingID=" + testBookingID).ToList());
}
@helper printList(Dictionary<string, List<string>> list)
{
    <ul>
    @foreach (var l in list)
    {
        <li>@l.Key
            <ul>
                @foreach (var l2 in l.Value)
                {
                    <li><a target="_blank" href="@(LcUrl.LangPath + l2)">@l2</a></li>
                }
            </ul>
        </li>
    }
    </ul>
}
<h1>Testing Email Templates along the site</h1>
<h3>Use next links to test every template with some example data in the parameters</h3>
@printList(list)
<h3>Booking emails</h3>
<form action="" method="get">
    <label>Use BookingID: <input type="text" name="BookingID" placeholder="BookingID" /></label>
    <label><input type="checkbox" name="hipaa" value="true" /> <span>Use HIPAA templates</span></label>
    <input type="submit" value="APPLY" />
</form>
@printList(bookingList)
<form action="" method="post">
    <h2>Send a testing email:</h2>
    <input type="text" name="url" placeholder="Email template URL" style="width:80%" />
    <input type="text" name="email" placeholder="Email to..." style="width:80%" />
    <input type="submit" value="Send email" style="display:block" />
</form>
