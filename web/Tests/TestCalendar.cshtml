@*
    Manually try to import an icalendar file, remove old imported calendars,
    and list system timezones.
    Check TestCalendarInlineImport for similar stuff
*@
@using WebMatrix.WebData;
@{
    LcHelpers.TestArea();
    Layout = "_TestLayout.cshtml";
    
    var imported = false;
    var cleanedup = false;
    if (IsPost) {
        // Import
        if (Request.Files["ics"] != null) {
            LcCalendar.Import(WebSecurity.CurrentUserId, Request.Files["ics"].InputStream);
            imported = true;
        }
        if (Request.Form["action"] == "cleanup") {
            
            using (var ent = new CalendarDll.Data.loconomicsEntities())
            {
                foreach(var dbevent in ent.CalendarEvents
                    .Where(c => !c.CalendarReccurrence.Any() && c.EndTime < DateTime.Now && c.EventType == 4)) {
                    ent.CalendarEvents.Remove(dbevent);
                }
                ent.SaveChanges();
            }
            
            cleanedup = true;
        }
    }
}
<div>
    <h2>Import calendar file to user: @WebSecurity.CurrentUserId</h2>
    <form method="post" enctype="multipart/form-data">
        Select file: <input type="file" name="ics" />
        <div class="actions">
            <input type="submit" class="main-action" value="Import" />
        </div>
        @if (imported)
        {
            <div class="info">File imported!</div>
        }
    </form>
    <form method="post" style="margin: 3em 0;">
        Clean-up calendar tables by removing old imported events (only not recurrent ones and only imported)
        <input type="hidden" name="action" value="cleanup" />
        @if (cleanedup) {
            <div class="info">Cleaning done!</div>
        }
        <div class="actions">
            <input type="submit" class="main-action" value="Clean-up calendar" />
        </div>
    </form>
    <h2>Time Zones</h2>
    @{
        System.Collections.ObjectModel.ReadOnlyCollection<TimeZoneInfo> zones = TimeZoneInfo.GetSystemTimeZones();
        <div>@String.Format("The local system has the following {0} time zones", zones.Count)</div>
        <table>
        <tr><th>DisplayName</th><th>Microsoft TimeZoneInfo ID</th><th>Offset</th><th>DST</th></tr>
        @foreach (TimeZoneInfo zone in zones) {
           <tr><td>@zone.DisplayName</td><td>@(zone.Id)</td><td>@zone.BaseUtcOffset</td><td>@zone.SupportsDaylightSavingTime</td></tr>
        }
        </table>
    }
</div>