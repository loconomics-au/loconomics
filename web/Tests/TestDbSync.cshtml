@*
    Allows to generate SQL scripts for content based on templates and
    execute SQL scripts that import data or upgrade the database scheme.

    For a while, the upgrade scripts are being executed through the database tools and
    not using this.
    TODO: review this if may help with fully automation of the process.
*@
@using WebMatrix.Data;
@using System.Text.RegularExpressions;
@{
    LcHelpers.TestArea();
    Layout = "_TestLayout.cshtml";
    string DEFAULT_PREFIX = LcHelpers.Channel + "-table";
    var folder = Server.MapPath(LcUrl.RenderAppPath + "_DBUpdate/");

    var db = Database.Open("sqlloco");
    
    string exportMessage = null,
           importMessage = null;
    
    if (IsPost) {
        switch(Request["action"]) {
            case "export":
                {
                    List<string> posttables = new List<string>();
                    if (Request.Form["tables[]"] != null)
                    {
                        foreach (var t in Request.Form.GetValues("tables[]"))
                        {
                            posttables.Add(t);
                        }
                    }
                    if (Request.Form["template-tables[]"] != null)
                    {
                        foreach (var t in Request.Form.GetValues("template-tables[]"))
                        {
                            if (!posttables.Contains(t))
                            {
                                posttables.Add(t);
                            }
                        }
                    }

                    var fprefix = (N.W(Request["file-prefix"]) ?? DEFAULT_PREFIX) + "-";
                    int nerrors = 0, nsuccesses = 0;
                    foreach (string table in posttables)
                    {
                        try
                        {
                            // Get full table data
                            var tdata = db.Query("SELECT * FROM " + table);

                            // Export as JSON
                            if (Request["export-json"].AsBool())
                            {
                                System.IO.File.WriteAllText(
                                    // File name
                                    folder + fprefix + table + ".dbtable.json",
                                    // Table data
                                    Json.Encode(tdata),
                                    System.Text.Encoding.UTF8
                                );
                            }

                            // Export as SQL using Upsert template
                            if (Request["export-sql"].AsBool())
                            {
                                CreateSQLScript(folder, fprefix, table, tdata);
                            }
                            
                            nsuccesses++;
                        }
                        catch (Exception ex)
                        {
                            nerrors++;
                            ModelState.AddFormError("Error [" + table + "]: " + ex.Message);
                        }
                    }
                    if (nerrors == 0) {
                        exportMessage = String.Format("{0} Tables exported successfully!", nsuccesses);
                    } else {
                        exportMessage = String.Format("{0} tables with errors (not exported), and {1} tables exported successfully.", nerrors, nsuccesses);
                    }
                }
                break;
            case "import":
                {
                    if (Request.Form["scripts[]"] != null) {
                        int nerrors = 0, nsuccesses = 0;
                        // For a success batch execution, we disable contraints during update
                        try{
                        db.Execute(@"
                            EXEC sp_msforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT all'
                            EXEC sp_msforeachtable 'ALTER TABLE ? DISABLE TRIGGER all'
                        ");
                        } catch (Exception ex){
                            ModelState.AddFormError("Initializing batch: impossible to disable contraints. Detail: " + ex.Message);
                        }
                        
                        foreach(var script in Request.Form.GetValues("scripts[]")){
                            try{
                                var sqlScript = System.IO.File.ReadAllText(folder + script + ".sql");
                                foreach (var step in GetSqlBatchSteps(sqlScript)) {
                                    db.Execute(step);
                                }
                                nsuccesses++;
                            } catch(Exception ex) {
                                nerrors++;
                                ModelState.AddFormError("Error [" + script + "]: " + ex.Message);
                            }
                        }
                        
                        // Re-enabling contraints after update. Any constraint error introduced during update will appear right now.
                        try{
                        db.Execute(@"
                            EXEC sp_msforeachtable 'ALTER TABLE ? WITH CHECK CHECK CONSTRAINT all'
                            EXEC sp_msforeachtable 'ALTER TABLE ? ENABLE TRIGGER all'
                        ");
                        } catch (Exception ex) {
                            ModelState.AddFormError(@"Ending batch: errors found while re-enabling constraints, data was introduced but constraints
                                remains disabled until the errors in data are manually corrected or batch executed again without errors.
                                Most times this is because other tables, with related data, require to be updated at the same time.
                                Error detail: " + ex.Message);
                        }
                        
                        if (nerrors == 0) {
                            importMessage  = String.Format("{0} Scripts executed successfully!", nsuccesses);
                        } else {
                            importMessage = String.Format("{0} scripts with errors (nothing or partially executed), {1} scripts executed successfully.", nerrors, nsuccesses);
                        }
                    }
                }
                break;
        }
    }
    
    
    // Get data for 'export' section
    var exportTables = db.Query(@"
        select name from sysobjects where xtype = 'U' order by name ASC
    ");
    var exportTableTemplates = new List<string>();
    foreach(var f in System.IO.Directory.EnumerateFiles(folder, "_template-INSERT-*.sql", SearchOption.TopDirectoryOnly)) {
        var r = new System.Text.RegularExpressions.Regex("_template-INSERT-(.*)\\.sql", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        var m = r.Match(f);
        if (m.Success && m.Groups.Count > 1){
            exportTableTemplates.Add(m.Groups[1].Value);
        }
    }
    
    // Get data for 'import' section
    var importScripts = new List<string>();
    foreach(var f in System.IO.Directory.EnumerateFiles(folder, "*.sql", SearchOption.TopDirectoryOnly)) {
        var r = new System.Text.RegularExpressions.Regex("([^\\\\]*)\\.sql", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        var m = r.Match(f);
        if (m.Success && m.Groups.Count > 1){
            var sf = m.Groups[1].Value;
            if (!sf.StartsWith("_")) {
                importScripts.Add(m.Groups[1].Value);
            }
        }
    }
 
    db.Dispose();
}
@functions{
    /// <summary>
    /// Create SQL script to replicate table.
    /// Helpful ressources for single table and multi table changes,
    /// Identity reseed and temporarly disable contraints (foreign keys, triggers).
    /// http://stackoverflow.com/questions/159038/can-foreign-key-constraints-be-temporarily-disabled-using-t-sql
    /// http://stackoverflow.com/questions/155246/how-do-you-truncate-all-tables-in-a-database-using-tsql#156813
    /// </summary>
    /// <param name="folder"></param>
    /// <param name="fprefix"></param>
    /// <param name="tablename"></param>
    /// <param name="tdata"></param>
    void CreateSQLScript(string folder, string fprefix, string tablename, dynamic tdata) {
        var sql = "";
        
        // Disable constraints FOR ALL TABLES (do it per table gets errors):
        sql += @"
/*__NOT_IN_BATCH__*/EXEC sp_msforeachtable 'ALTER TABLE ? NOCHECK CONSTRAINT all'
/*__NOT_IN_BATCH__*/EXEC sp_msforeachtable 'ALTER TABLE ? DISABLE TRIGGER  all'";
        // Delete all rows (don't forget \n)
        sql += String.Format("\nDELETE FROM {0} \n", tablename);

        // Upserts for the new data
        var tpl = System.IO.File.ReadAllText(folder + "_template-INSERT-" + tablename + ".sql");
        foreach(var tr in tdata) {
            var sqltr = tpl;
            foreach(var col in tr.Columns) {
                var r = new System.Text.RegularExpressions.Regex("@" + col + "\\b");
                sqltr = r.Replace(sqltr, PrepareSqlValue(tr[col]));
                //sqltr = sqltr.Replace("@" + col, PrepareSqlValue(tr[col]));
            }
            sql += sqltr + "\n";
        }
        
        // Re-enable constraints FOR ALL TABLES (do it per table gets errors):
        sql += @"
/*__NOT_IN_BATCH__*/EXEC sp_msforeachtable 'ALTER TABLE ? WITH CHECK CHECK CONSTRAINT all'
/*__NOT_IN_BATCH__*/EXEC sp_msforeachtable 'ALTER TABLE ? ENABLE TRIGGER  all'";
        sql += "\n";

        // Write file
        System.IO.File.WriteAllText(
            // File name
            folder + fprefix + tablename + ".dbtable.sql",
            // Table data as sql
            sql,
            System.Text.Encoding.UTF8
        );
    }
    string PrepareSqlValue(object val) {
        var strval = "NULL";
        if (N.D(val) != null) {
            strval = val.ToString().Replace("'", "''");
            return "'" + strval + "'";
        }
        return strval;
    }
    bool FormKeyContains(string formkey, string value) {
        if (Request.Form[formkey] != null){
            foreach(var str in Request.Form.GetValues(formkey)){
                if (str == value){
                    return true;
                }
            }
        }
        return false;
    }
    /// <summary>
    /// It splits a batchSql into different strings with each
    /// batch step.
    /// It just split 'GO' keywords without beggining white-spaces and
    /// doesn't discard GOs inside comments.
    /// SPECIAL: It removes every line of SQL that starts with the
    /// special comment: /*__NOT_IN_BATCH__*/
    /// The purpose of this is allow creation of individual scripts that works
    /// fine itself (with that lines), but can be executed several of them in the same batch with
    /// some additions to ensure the success (as disable contraints temporarly)
    /// and that lines can be counterproductive for a batch.
    /// </summary>
    /// <param name="batchSql"></param>
    /// <returns></returns>
    IEnumerable<string> GetSqlBatchSteps(string batchSql){
        // Get different batch steps, separated by the GO keyword
        Regex regex = new Regex(@"^GO\b", RegexOptions.IgnoreCase | RegexOptions.Multiline);
        var ret = regex.Split(batchSql);
        // Remove lines with the special comment "/*__NOT_IN_BATCH__*/"
        for(var i = 0; i < ret.Length; i++) {
            // Clean-up: avoid unwanted lines, not for batch
            var str = (new Regex(@"^/\*__NOT_IN_BATCH__\*/.*$", RegexOptions.Multiline)).Replace(ret[i], "");
            // Return only lines with content
            if (!string.IsNullOrWhiteSpace(str))
                yield return str;
        }
    }
}
@helper printTableCheck(string table, string prefix = ""){
    <li><label><input type="checkbox" name="@(prefix)tables[]" value="@table" @LcHelpers.IsChecked(FormKeyContains(prefix + "tables[]", table), true) /> @table</label></li>
}
<style type="text/css">
    #syncDb .tab-body ul > li 
    {
        margin: 0;
        padding: 2px 0;
    }
</style>
<div id="syncDb">
    <h1>Sync channel databases</h1>
    <p>Current channel <strong>@LcHelpers.Channel</strong></p>

    <div class="tabbed folders">
        <ul class="tabs">
            <li class="current"><a href="#export">Export data / Generate scripts</a></li>
            <li><a href="#import">Import data / Execute scripts</a></li>
        </ul>
        <div id="export" class="current tab-body">
            <form action="" method="post">
                @Html.ValidationSummary()
                <input type="hidden" name="action" value="export" />
                @if (!String.IsNullOrEmpty(exportMessage))
                {
                    <div class="success message">@exportMessage</div>
                }
                <label>File names prefix: <input type="text" name="file-prefix" value="@(Request["file-prefix"] ?? DEFAULT_PREFIX)" /></label>
                <div>
                    <label><input type="checkbox" name="export-json" value="True" @LcHelpers.IsChecked(Request["export-json"].AsBool(), true) /> Export as JSON</label>
                    <label><input type="checkbox" name="export-sql" value="True" @LcHelpers.IsChecked(Request["export-sql"].AsBool(), true) /> Export as SQL</label>
                </div>
                <input type="submit" value="Export" />
                <h2>Choose tables to export</h2>
                <h3>Tables with template (<a href="#select-all-templates">click here to select all</a>)</h3>
                <ul class="tables tables-with-templates">
                    @foreach (var table in exportTableTemplates)
                    {
                        @printTableCheck(table, "template-")
                    }
                </ul>
                <h3>All tables</h3>
                <ul class="tables">
                    @foreach (var table in exportTables)
                    {
                        @printTableCheck(table.name)
                    }
                </ul>
            </form>
            <script type="text/javascript">
                jQuery(function ($) {
                    $('form a').click(function () {
                        if (this.getAttribute('href') == '#select-all-templates') {
                            $('.tables-with-templates input').prop('checked', true);
                            return false;
                        }
                    });
                });
            </script>
        </div>
        <div id="import" class="tab-body">
            <form action="" method="post">
                @Html.ValidationSummary()
                @if (!String.IsNullOrEmpty(importMessage))
                {
                    <div class="success message">@importMessage</div>
                }
                <input type="hidden" name="action" value="import" />
                <div class="warning">Remember do a Backup first!</div>
                <input type="submit" value="Execute / import" />
                <h2>Choose scripts to execute</h2>
                
                <ul class="scripts">
                    @foreach (var script in importScripts)
                    {
                        <li><label><input type="checkbox" name="scripts[]" value="@script" @LcHelpers.IsChecked(FormKeyContains("scripts[]", script), true) /> @script</label></li>
                    }
                </ul>
            </form>
        </div>
    </div>
</div>