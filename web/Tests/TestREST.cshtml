@*
    List all REST API endpoints and methods available, and provides a console where perform requests.
    
    The list of endpoints is generated from JavaScript, using as source a big object with examples
    copied from each of the pages implementing them (so must be modified both at source and here to
    keep in sync).
    Click on the request method names on each endpoint title to copy an example in the console, where
    should be triggered with the method buttons (GET, POST, PUT, DELETE).
*@
@{
    if (!LcHelpers.InDev) {
        LcHelpers.TestArea();
    }
    Layout = "_TestLayout.cshtml";
    
    var url = Request["url"];
}
<script type="text/javascript">
    var REST_API = {
        "Test": {
            "url": "/api/v1/en-US/Test",
            "get": {
                "name": "userpos"
            },
            "post": {
                "name": "Me",
                "num": "23g",
                "short": "No longer than 5"
            }
        },
        "Test item": {
            "url": "/api/v1/en-US/Test/20",
            "put": {
                "name": "Me",
                "num": 10
            },
            "delete": {}
        },
        "Test Server Error": {
            "url": "/api/v1/en-US/Test",
            "all": {
                "givemeerror": "Something goes wrong"
            }
        },

        "Availability types": {
            "url": "/api/v1/en-US/availability-types",
            "get": {}
        },

        "Event types": {
            "url": "/api/v1/en-US/event-types",
            "get": {
                "onlySelectable": false
            }
        },

        "Facebook User": {
            "url": "/api/v1/en-US/auth/facebook-user",
            "get": {
                "do_login": false,
                "facebook_id": 324234123,
                "signed_request": "fbsr_feSDf323fsf2"
            }
        },

        "Feedback Support": {
            "url": "/api/v1/en-US/feedback/support",
            "post": {
                "message": "A problem with that you know",
                "vocElementID": 1,
                "userDevice": "{ \"userAgent\": \"Mozilla/5.0 Some Browser\" }"
            }
        },
        "Feedback Ideas": {
            "url": "/api/v1/en-US/feedback/ideas",
            "post": {
                "message": "I have an idea!",
                "vocElementID": 1,
                "becomeCollaborator": true,
                "userDevice": "{ \"userAgent\": \"Mozilla/5.0 Some Browser\" }"
            }
        },

        "Job Titles (item) [DEPRECATED]": {
            "url": "/api/v1/en-US/job-titles/106",
            "get": { }
        },

        "Login": {
            "url": "/api/v1/en-US/auth/login",
            "post": {
                 "username": "some user email",
                 "password": "",
                 "returnProfile": false,
                 "api comment": "Param returnProfile allows to return a 'profile' property with the user profile data (table [users]). The returned 'redirectUrl' on success must be mandatory when there is a value since sometimes will be different from the given 'redirect', as for service professionals in the Onboarding, they must continue that at the step given in 'redirectUrl'. This is the fact for current Website, what rules we will manage on mobile?."
            }
        },
        "Facebook Login": {
            "url": "/api/v1/en-US/auth/login/facebook",
            "post": {
                "accessToken": "Facebook Access Token",
                "returnProfile": true
            }
        },

        "Logout": {
            "url": "/api/v1/en-US/auth/logout",
            "post": {}
        },

        "Postal Codes": {
            "url": "/api/v1/en-US/postal-codes/90001",
            "get": {}
        },

        "Service Types (formerly Pricing Types)": {
            "url": "/api/v1/en-US/pricing-types",
            "get": {}
        },
        "Service Types (item) (formerly Pricing Types)": {
            "url": "/api/v1/en-US/pricing-types/3",
            "get": {}
        },
        "Service Types by Job Title (formerly Pricing Types)": {
            "url": "/api/v1/en-US/pricing-types/job-title/106",
            "get": {}
        },

        "Signup": {
            "url": "/api/v1/en-US/auth/signup",
            "post": {
                "email": "some user email",
                "password": "",
                "atBooking": true,
                "firstName": "John",
                "lastName": "Smith",
                "phone": "1234",
                "profileType": "service-professional",
                "facebookUserID": "",
                "facebookAccessToken": "",
                "returnProfile": false,
                "jobTitleID": null,
                "jobTitleName": null,
                "isOrganization": false,
                "api comment": "Same returned data as in Login, and returnProfile behaves the same too. The returned 'redirectUrl' on success must be mandatory when there is a value since sometimes will be different from the given 'redirect', as for providers in the Onboarding, they must continue that at the step given in 'redirectUrl'. This is the fact for current Website, what rules we will manage on mobile?."
            }
        },
        "CCC Signup": {
            "url": "/api/v1/en-US/auth/signup",
            "post": {
                "email": "some user email",
                "password": "",
                "atBooking": true,
                "firstName": "John",
                "lastName": "Student",
                "phone": "1234",
                "profileType": "service-professional",
                "facebookUserID": "",
                "facebookAccessToken": "",
                "returnProfile": false,
                "jobTitleID": null,
                "jobTitleName": null,
                "isOrganization": false,
                "isCccMember": true,
                "institutionID": 222,
                "fieldOfStudyID": 1,
                "cccUserType": "student",
                "api comment": "Used only for California Community Colleges specific landing pages."
            }
        },
        "Facebook Signup (quick signup that will retrieve basic user data from Facebook, server2server)": {
            "url": "/api/v1/en-US/auth/signup/facebook",
            "post": {
                "accessToken": "Facebook Access Token",
                "profileType": "service-professional",
                "returnProfile": true
            }
        },

        "Addresses: home (ever single)": {
            "url": "/api/v1/en-US/me/addresses/home",
            "get": { },
            "put": {
                "addressName":"Home",
                "addressLine1":"Avda Castelao",
                "addressLine2":"44",
                "postalCode":"90001",
                "specialInstructions":""
            }
        },
        "Addresses: service addresses per Job Title": {
            "url": "/api/v1/en-US/me/addresses/service/106",
            "get": { },
            "post": {
                "addressName":"Workshop",
                "addressLine1":"Second street",
                "addressLine2":"102",
                "postalCode":"90001",
                "specialInstructions":"",
                "isServiceLocation":true,
                "isServiceArea":false,
                "serviceRadius":"",
                "api_comment": "Try setting isServiceLocation false for validation of almost one, and then isServiceArea:true to make address line1 and name optional."
            }
        },
        "Addresses: service addresses per Job Title (single)": {
            "url": "/api/v1/en-US/me/addresses/service/106/95",
            "get": { },
            "put": {
                "addressName":"Billing",
                "addressLine1":"Second street",
                "addressLine2":"102",
                "postalCode":"90001",
                "specialInstructions":"",
                "isServiceLocation":true,
                "isServiceArea":false,
                "serviceRadius":"",
                "api_comment": "Try setting isServiceLocation false for validation of almost one, and then isServiceArea:true to make address line1 and name optional."
            },
            "delete": { }
        },
        "Addresses: billing addresses": {
            "url": "/api/v1/en-US/me/addresses/billing",
            "get": { },
            "post": {
                "addressName":"Workshop",
                "addressLine1":"Second street",
                "addressLine2":"102",
                "postalCode":"90001",
                "specialInstructions":"",
                "api_comment": "Try setting isServiceLocation false for validation of almost one, and then isServiceArea:true to make address line1 and name optional."
            }
        },
        "Addresses: billing addresses (single)": {
            "url": "/api/v1/en-US/me/addresses/billing/71",
            "get": { },
            "put": {
                "addressName":"Workshop",
                "addressLine1":"Second street",
                "addressLine2":"102",
                "postalCode":"90001",
                "specialInstructions":"",
                "api_comment": "Try setting isServiceLocation false for validation of almost one, and then isServiceArea:true to make address line1 and name optional."
            },
            "delete": { }
        },
        "Addresses: client addresses": {
            "url": "/api/v1/en-US/me/addresses/clients/141",
            "get": { }
        },

        "Bookings (read only)": {
            "url": "/api/v1/en-US/me/bookings",
            "get": {
                 "start": "2014-06-01T12:00:00",
                 "end": "2014-09-30T10:00:00Z"
            }
        },
        "Bookings (single; read only)": {
            "url": "/api/v1/en-US/me/bookings/73",
            "get": {}
        },

        "Calendar Syncing": {
            "url": "/api/v1/en-US/me/calendar-syncing",
            "get": { },
            "put": {
                "icalImportUrl": "http://calendar.google.com/something/ical.ics"
            }
        },
        "Calendar Syncing Reset Export URL": {
            "url": "/api/v1/en-US/me/calendar-syncing/reset-export-url",
            "post": { }
        },

        "Client Booking: Create booking: Post to create booking and Get to request the initial data for a new booking": {
            "url": "/api/v1/en-US/me/client-booking",
            "get": {
                "serviceProfessionalUserID": 141,
                "jobTitleID": 106,
                "bookCode": null
            },
            "post": {
                "serviceProfessionalUserID": 141,
                "jobTitleID": 106,
                "serviceStartTime": "2015-10-19T08:30:00.000Z",
                "alternative1StartTime": "2015-10-26T09:30:00.000Z",
                "alternative2StartTime": null,
                "serviceAddress": {
                    "addressID": 240,
                    "addressName": "Service Area",
                    "addressLine1": "",
                    "postalCode": 98001,
                    "countryCode": "US",
                    "latitude": 47.3394747,
                    "longitude": -122.2667661,
                },
                "services": [8, 108],
                "promotionalCode":null,
                "billingAddress": {
                    "postalCode": 90001,
                    "paymentMethodID": "0",
                    "nameOnCard": "",
                    "cardNumber": "123456789456123",
                    "expirationMonth": "01",
                    "expirationYear": "2017",
                    "securityCode": "1565",
                    "savePayment": false
                },
                "specialRequests": "Some notes to the professional",
                "paymentMethod": {
                    "paymentMethodID": "TEST: previously saved method token",
                    "cardNumber": "123443121234",
                    "nameOnCard": "Me",
                    "expirationMonth": "11",
                    "expirationYear": "2018",
                    "securityCode": "123",
                    "savePayment": true
                }
            }
        },
        "Client Booking: Update booking": {
            "url": "/api/v1/en-US/me/client-booking/34",
            "put": {
                "serviceStartTime": "2015-10-19T08:30:00.000Z",
                "serviceAddress": {
                    "addressID": 240,
                    "addressName": "Service Area",
                    "addressLine1": "",
                    "postalCode": 98001,
                    "countryCode": "US",
                    "latitude": 47.3394747,
                    "longitude": -122.2667661,
                },
                "services": [8, 108],
                "specialRequests": "Some notes to the professional"
            }
        },
        "Client Booking: Cancel booking": {
            "url": "/api/v1/en-US/me/client-booking/34/cancel",
            "post": {}
        },
        "Client Booking: Decline/deny booking": {
            "url": "/api/v1/en-US/me/client-booking/34/deny",
            "post": {}
        },

        "Clients (list and create)": {
            "url": "/api/v1/en-US/me/clients",
            "get": { },
            "post": {
                "firstName": "John",
                "lastName": "Smith",
                "secondLastName": "",
                "email": "john@smith.net",
                "phone": "1234567",
                "canReceiveSms": true,
                "birthMonth": 2,
                "birthMonthDay": 29,
                "notesAboutCustomer": ""
            }
        },
        "Clients (item)": {
            "url": "/api/v1/en-US/me/clients/141",
            "get": { },
            "put": {
                "firstName": "John",
                "lastName": "Smith",
                "secondLastName": "",
                "email": "john@smith.net",
                "phone": "1234567",
                "canReceiveSms": true,
                "birthMonth": 2,
                "birthMonthDay": 29,
                "notesAboutCustomer": ""
            },
            "delete": { }
        },
        "Clients Public Search": {
            "url": "/api/v1/en-US/me/clients/public-search",
            "get": {
                "fullName": "John Smith",
                "email": "john@smith.net",
                "phone": "1234"
            }
        },

        "Events and to add event": {
            "url": "/api/v1/en-US/me/events",
            "get": {
                 "types": [3, 5],
                 "start": "2014-06-01T12:00:00",
                 "end": "2014-09-30T10:00:00Z",
                 "api comment": "types is optional, and will return all the types except 'work hours' by default (To review if this is the most optimal). Optional start and end dates to reduce the results, accepting ISO strings."
            },
            "post": {
                "EventTypeID":3,
                "Summary":"Housekeeper services for JoshuaProvider D.",
                "AvailabilityTypeID":3,
                "StartTime":"2014-03-25T09:00:00",
                "EndTime":"2014-03-25T19:00:00",
                "IsAllDay":false,
                "TimeZone":"-8",
                "Location":"null",
                "Description":"test description of a REST event"
            }
        },
        "Event (single)": {
            "url": "/api/v1/en-US/me/events/353",
            "get": {},
            "put": {
                "EventTypeID":3,
                "Summary":"Housekeeper services for JoshuaProvider D.",
                "AvailabilityTypeID":3,
                "StartTime":"2014-03-25T09:00:00",
                "EndTime":"2014-03-25T19:00:00",
                "IsAllDay":false,
                "TimeZone":"-8",
                "Location":"null",
                "Description":"test description of a REST event",
                "RecurrenceRule":{
                    "FrequencyTypeID":502,
                    "Interval":1,
                    "Ending":"never",
                    "SelectedWeekDays":[1,3,5],
                    "MonthlyWeekDay":false
                }
            },
            "delete": {}
        },

        "Marketplace Profile (get and update)": {
            "url": "/api/v1/en-US/me/marketplace-profile",
            "get": { },
            "put": {
                "publicBio": "I have little to tell. That's all.",
                "serviceProfessionalProfileUrlSlug": "my-custom-loconomics-url",
                "serviceProfessionalWebsiteUrl": "http://loconomics.com.au"
            }
        },

        "Messaging: Threads": {
            "url": "/api/v1/en-US/me/messaging",
            "get": {
                "limit": 20,
                "untilID": null,
                "sinceID": null,
                "messagesLimit": 1
            },
            "post": {
                "clientUserID": 141,
                "serviceProfessionalUserID": 141,
                "jobTitleID": 106,
                "subject": "Testing conversation",
                "bodyText": "Testing first message"
            }
        },
        "Messaging: Single Thread": {
            "url": "/api/v1/en-US/me/messaging/225",
            "get": {
                "limit": 20,
                "untilID": null,
                "sinceID": null
            },
            "post": {
                "bodyText": "Answering to testing message (second)"
            }
        },
        "Messaging: Single Message": {
            "url": "/api/v1/en-US/me/messaging/225/525",
            "get": { }
        },

        "My payment methods": {
            "url": "/api/v1/en-US/me/payment-methods",
            "get": {}
        },

        "Privacy Settings (get and update)": {
            "url": "/api/v1/en-US/me/privacy-settings",
            "get": { },
            "put": {
                "smsBookingCommunication": false,
                "phoneBookingCommunication": true,
                "loconomicsCommunityCommunication": true,
                "loconomicsDbmCampaigns": false,
                "profileSeoPermission": true,
                "loconomicsMarketingCampaigns": true,
                "coBrandedPartnerPermissions": false
            }
        },

        "User Profile (get and update)": {
            "url": "/api/v1/en-US/me/profile",
            "get": { },
            "put": {
                // Name
                "firstName": "Iago",
                "lastName": "Lorenzo",
                "secondLastName": "Salgueiro",
                "businessName": "",
                // Contact
                "alternativeEmail": "",
                "phone": "",
                "canReceiveSms": false,
                "birthMonthDay": 20,
                "birthMonth": 4
            }
        },
        "User Profile: Track changes (differential changes)": {
            "url": "/api/v1/en-US/me/profile/tracking",
            "put": {
                "onboardingStep": "welcome"
            }
        },
        "User Profile: save just  organization info (for isOrganization users)": {
            "url": "/api/v1/en-US/me/profile/organization",
            "put": {
                "orgName": "My Coop.",
                "orgDescription": null,
                "orgWebsite": null
            }
        },
        "User Profile: Become a service professional": {
            "url": "/api/v1/en-US/me/profile/become-service-professional",
            "post": {}
        },

        "Scheduling Preferences": {
            "url": "/api/v1/en-US/me/scheduling-preferences",
            "get": { },
            "put": {
                "advanceTime": 0.5,
                "betweenTime": 1,
                "incrementsSizeInMinutes": 30
            }
        },

        "Service Professional Booking: Create booking": {
            "url": "/api/v1/en-US/me/service-professional-booking",
            "post": {
                "clientUserID": 141,
                "jobTitleID": 106,
                "serviceAddressID": 1,
                "startTime": "2015-01-01T10:00:00Z",
                "services": [ 8, 35 ],
                "preNotesToClient": "",
                "preNotesToSelf": "",
                "api comment": "Fields of the Simplified Freelancer Booking, fits to the App needs. Services is a list of service attributes IDs included in the pricing."
            }
        },
        "Service Professional Booking: Update booking": {
            "url": "/api/v1/en-US/me/service-professional-booking/73",
            "put": {
                "serviceAddressID": 19,
                "startTime": "2015-02-08T10:30:00Z",
                "services": [ 8, 35 ],
                "preNotesToClient": "",
                "preNotesToSelf": "",
                "postNotesToClient": "",
                "postNotesToSelf": "",
                "api comment": "Fields of the Simplified Freelancer Booking, fits to the App needs. Services is a list of service attributes IDs included in the pricing."
            }
        },
        "Service Professional Booking: Cancel booking": {
            "url": "/api/v1/en-US/me/service-professional-booking/73/cancel",
            "post": {}
        },
        "Service Professional Booking: Deny/decline booking": {
            "url": "/api/v1/en-US/me/service-professional-booking/73/deny",
            "post": {}
        },
        "Service Professional Booking: Confirm a client booking request": {
            "url": "/api/v1/en-US/me/service-professional-booking/73/confirm",
            "post": {
                "dataType": "preferred",
                "api comment": "dataType can be: preferred, alternative1 or alternative2. 'Preferred' will pick up the date currently on the 'serviceDateID'."
            }
        },

        "Service Professional Pricing - All user pricing": {
            "url": "/api/v1/en-US/me/service-professional-services",
            "get": {}
        },
        "Service Professional Pricing - Client-specific pricing (all job titles)": {
            "url": "/api/v1/en-US/me/service-professional-services/client/141",
            "get": {}
        },
        "Service Professional Pricing - Per Job Title": {
            "url": "/api/v1/en-US/me/service-professional-services/106",
            "get": {},
            "post": {
                "pricingTypeID": 3,
                "name": "Testing 2",
                "description": "Testing 2",
                "price": 20,
                "serviceDurationMinutes": 60, // In minutes! Different than pricing-estimate (there is in hours)
                "firstTimeClientsOnly": false,
                "numberOfSessions": 1,
                "priceRate": 14,
                "priceRateUnit": "hour",
                "isPhone": false,
                "visibleToClientID": 0, // 0 for public, or clientID for client-specific pricing
                "createdDate": "2013-08-28T21:05:59.947",
                "updatedDate": "2013-08-28T21:08:02.113",
                "serviceAttributes": [
                    501
                ],
                "noPriceRate": false,
                "api comment": "Pricing is assigned to the logged user, cannot be added to other user so no user parameter is needed. serviceDurationMinutes parameter as an integer. Different validation rules apply depending on the pricing type"
            }
        },
        "Service Professional Pricing - Job Title - Pricing item": {
            "url": "/api/v1/en-US/me/service-professional-services/106/73",
            "get": { },
            "put": {
                "pricingTypeID": 3,
                "name": "Testing 2",
                "description": "Testing 2",
                "price": 20,
                "serviceDurationMinutes": 60, // In minutes! Different than pricing-estimate (there is in hours)
                "firstTimeClientsOnly": false,
                "numberOfSessions": 1,
                "priceRate": 14,
                "priceRateUnit": "hour",
                "isPhone": false,
                "visibleToClientID": 0, // 0 for public, or clientID for client-specific pricing
                "createdDate": "2013-08-28T21:05:59.947",
                "updatedDate": "2013-08-28T21:08:02.113",
                "serviceAttributes": [
                    501
                ],
                "noPriceRate": false,
                "api comment": "Pricing is assigned to the logged user, cannot be added to other user so no user parameter is needed. serviceDurationMinutes parameter as an integer. Different validation rules apply depending on the pricing type"
            },
            "delete": {}
        },
        "Service Professional Pricing - Job Title and Client (client-specific and public pricings)": {
            "url": "/api/v1/en-US/me/service-professional-services/106/client/562",
            "get": {
                "api comment": "The result includes all pricings for a job title that are available for the client - both client-specific pricings and public pricings"
            }
        },

        "Upcoming Bookings (bookings where user is the service professional)": {
            "url": "/api/v1/en-US/me/upcoming-bookings",
            "get": {
                "api comment": "The result is an object with: thisWeek, nextWeek, tomorrow, today, nextBooking; first four will contain the amount of bookings in the period and the time it starts-first-booking/ends-last-booking depending on the case."
            }
        },

        "Upcoming Appointments (bookings where user is the client)": {
            "url": "/api/v1/en-US/me/upcoming-appointments",
            "get": {}
        },

        "User Job Profile": {
            "url": "/api/v1/en-US/me/user-job-profile",
            "get": { },
            "post": {
                "jobTitleID": 106,
                "jobTitleName": "Custom job title",
                "intro": "Job title introduction",
                "cancellationPolicyID": 1,
                "instantBooking": true,
                "collectPaymentAtBookMeButton": true
            }
        },
        "User Job Profile (item -- Job Title)": {
            "url": "/api/v1/en-US/me/user-job-profile/106",
            "get": { },
            "put": {
                "intro": "Job title introduction",
                "cancellationPolicyID": 1,
                "instantBooking": true,
                "collectPaymentAtBookMeButton": true
            },
            "delete": { }
        },
        "User Job Profile - Deactivation": {
            "url": "/api/v1/en-US/me/user-job-profile/106/deactivate",
            "post": { }
        },
        "User Job Profile - Reactivation": {
            "url": "/api/v1/en-US/me/user-job-profile/106/reactivate",
            "post": { }
        },

        "User Availability at times detail": {
            "url": "/api/v1/en-US/users/141/availability/times",
            "get": {
                "start": "2016-08-01T22:00:00Z",
                "end": "2016-08-30T22:00:00Z"
            }
        },

        "Public user profile summary": {
            "url": "/api/v1/en-US/users/141",
            "get": {}
        },

        "User Public Job Profile (list of active job titles)": {
            "url": "/api/v1/en-US/users/141/job-profile",
            "get": {}
        },
        "User Public Job Title": {
            "url": "/api/v1/en-US/users/141/job-profile/106",
            "get": {}
        },

        "User Public Profile (basic data and contact)": {
            "url": "/api/v1/en-US/users/141/profile",
            "get": {}
        },

        "User rating": {
            "url": "/api/v1/en-US/users/141/ratings",
            "get": {}
        },
        "Client rating": {
            "url": "/api/v1/en-US/users/141/ratings/client",
            "get": {}
        },
        "Service Professional rating": {
            "url": "/api/v1/en-US/users/141/ratings/service-professional",
            "get": {}
        },
        "Job title rating": {
            "url": "/api/v1/en-US/users/141/ratings/106",
            "get": {}
        },

        "Public Service Addresses per job title": {
            "url": "/api/v1/en-US/users/141/service-addresses/106",
            "get": {}
        },

        "Public Service Professional Services per job title": {
            "url": "/api/v1/en-US/users/141/service-professional-services/106",
            "get": {}
        },

        "User verifications summary": {
            "url": "/api/v1/en-US/users/141/verifications-summary",
            "get": {}
        },
        "Client verifications summary": {
            "url": "/api/v1/en-US/users/141/verifications-summary/client",
            "get": {}
        },
        "Service Professional verifications summary": {
            "url": "/api/v1/en-US/users/141/verifications-summary/service-professional",
            "get": {}
        },
        "Job title verifications summary": {
            "url": "/api/v1/en-US/users/141/verifications-summary/106",
            "get": {}
        },

        "Weekly Schedule": {
            "url": "/api/v1/en-US/me/weekly-schedule",
            "get": {},
            "put": {
                "timeZone": "America/Los_Angeles",
                "selectedTimeZone": "PST::America/Los_Angeles",
                "sunday": [
                    {
                        "start": "09:00:00",
                        "end": "17:00:00"
                    }
                ],
                "monday": [
                    {
                        "start": "00:00:00",
                        "end": "23:59:59"
                    }
                ],
                "tuesday": [
                    {
                        "start": "00:00:00",
                        "end": "00:00:00"
                    }
                ],
                "wednesday": [
                    {
                        "start": "00:00:00",
                        "end": "23:59:59"
                    }
                ],
                "thursday": [],
                "friday": null,
                "saturday": [
                    {
                        "start": "10:00:00",
                        "end": "14:00:00"
                    },
                    {
                        "start": "16:30:00",
                        "end": "20:30:00"
                    }
                ],
                "isAllTime": false
            }
        },

        "Education (list and create)": {
            "url": "/api/v1/en-US/me/education",
            "get": { },
            "post": {
                "institutionName": "MIT",
                "degreeCertificate": "Engineer",
                "fieldOfStudy": "Computering",
                "fromYearAttended": "2002",
                "toYearAttended": "2005"
            }
        },
        "Education item": {
            "url": "/api/v1/en-US/me/education/123",
            "get": { },
            "put": {
                "institutionName": "MIT",
                "degreeCertificate": "Engineer",
                "fieldOfStudy": "Computering",
                "fromYearAttended": "2002",
                "toYearAttended": "2005"
            },
            "delete": { }
        },

        "User Service Attributes IDs": {
            "url": "/api/v1/en-US/me/service-attributes/106",
            "get": { },
            "put": {
                "serviceAttributes": {
                    "19": [ 57, 60, 59 ],
                    "5": [ 25, 26 ],
                    "49": [ 501 ],
                    "48": [ 735, 733, "new attribute" ]
                },
                "experienceLevelID": 1
            }
        },
        "User Service Attributes, Categories and Experience, for display": {
            "url": "/api/v1/en-US/users/141/service-attributes/106",
            "get": { }
        },
        "Job Title Service Attributes": {
            "url": "/api/v1/en-US/job-title-service-attributes/106",
            "get": { }
        },

        "User Verifications": {
            "url": "/api/v1/en-US/me/verifications",
            "get": { }
        },

        "Upload My Profile Picture": {
            "url": "/api/v1/en-US/me/profile-picture",
            "put": {
                "profilePicture": "Binary image/jpeg",
                "x": 0,
                "y": 0,
                "w": 0,
                "h": 0,
                "rotationAngle": 0
            },
            "delete": {}
        },
        "Edit My Profile Picture (rotate, crop, previously uploaded photo)": {
            "url": "/api/v1/en-US/me/profile-picture/edit",
            "post": {
                "x": 0,
                "y": 0,
                "w": 0,
                "h": 0,
                "rotationAngle": 0
            }
        },

        "My Work Photos by Job Title (read and create)": {
            "url": "/api/v1/en-US/me/work-photos/106",
            "get": {},
            "post": {
                "photo": "binary image/* content",
                "caption": "This is my workshop",
                "rankPosition": 1,
                "x": 0,
                "y": 0,
                "w": 0,
                "h": 0,
                "rotationAngle": 0
            }
        },
        "My Work Photos by Job Title, upload update or delete": {
            "url": "/api/v1/en-US/me/work-photos/106/1",
            "put": {
                "photo": "binary image/* content; optional here, to allow only update associated data or crop/rotate pre-uploaded photo",
                "caption": "This is my workshop",
                "rankPosition": 1,
                "x": 0,
                "y": 0,
                "w": 0,
                "h": 0,
                "rotationAngle": 0
            },
            "delete": {}
        },

        "Submit a License/Certification": {
            "url": "/api/v1/en-US/me/licenses-certifications/106",
            "get": {},
            "post": {
                "photo": "binary image/* content"
            }
        },

        "My licenses/certifications": {
            "url": "/api/v1/en-US/me/licenses-certifications/106",
            "get": { }
        },

        "User's licenses/certifications for a job title": {
            "url": "/api/v1/en-US/user/licenses-certifications/106",
            "get": { }
        },

        "List applicable job title licenses": {
            "url": "/api/v1/en-US/me/job-title-licenses/106",
            "get": { }
        },

        "List license/certification info": {
            "url": "/api/v1/en-US/license-certification/64",
            "get": { }
        },

        "States/Provinces": {
            "url": "/api/v1/en-US/states-provinces",
            "get": {}
        },

        "User Public Reviews as Customer": {
            "url": "/api/v1/en-US/users/141/reviews",
            "get": {
                "limit": 20,
                "until": null,
                "since": "2012-04-17T08:08:17.44Z"
            }
        },
        "User Public Reviews as Service Professional per Job Title": {
            "url": "/api/v1/en-US/users/141/reviews/106",
            "get": {
                "limit": 20,
                "until": null,
                "since": "2012-04-17T08:08:17.44Z"
            }
        },

        "Payment Account (get and update)": {
            "url": "/api/v1/en-US/me/payment-account",
            "get": { },
            "put": {
                "firstName": "John",
                "lastName": "Smith",
                "routingNumber": "1234",
                "accountNumber": "54321",
                "ssn": "342323423",
                "city": "San Francisco",
                "phone": "013242345",
                "postalCode": "90001",
                "stateProvinceCode": "CA",
                "streetAddress": "There 2th",
                "birthDate": "19850420T00:00Z",
                "agree": true,
                "isVenmo": false
            }
        },

        "Search Job Titles, Service Professionals, and Categories by Search Term": {
            "url": "/api/v1/en-US/search",
            "get": {
                "searchTerm": "cleaner",
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },

        "Search Service Professionals by Search Term": {
            "url": "/api/v1/en-US/search/service-professionals",
            "get": {
                "searchTerm": "Joshua",
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },

        "Search Service Professionals by Job TitleID": {
            "url": "/api/v1/en-US/search/service-professionals/by-job-title",
            "get": {
                "jobTitleID": "106",
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },

        "Search Job Titles Autocomplete": {
            "url": "/api/v1/en-US/search/job-titles/autocomplete",
            "get": {
                "searchTerm": "cleaner"
            }
        },

        "Search Job Titles by Search Term": {
            "url": "/api/v1/en-US/search/job-titles",
            "get": {
                "searchTerm": "cleaner",
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },

        "Search Job Title info by jobTitleID": {
            "url": "/api/v1/en-US/search/job-titles/106",
            "get": {
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },

        "Search Job Titles by CategoryID": {
            "url": "/api/v1/en-US/search/job-titles/by-category",
            "get": {
                "categoryID": "1",
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },


        "Search Categories by Search Term": {
            "url": "/api/v1/en-US/search/categories",
            "get": {
                "searchTerm": "home",
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },

        "Search Category info by CategoryID": {
            "url": "/api/v1/en-US/search/categories/1",
            "get": {
                "origLat": "37.788479",
                "origLong": "-122.40297199999998",
                "searchDistance": "30"
            }
        },

        "Reset password: Request e-mail / reset token": {
            "url": "/api/v1/en-US/auth/reset-password",
            "post": {
                "username": "some user email"
            }
        },
        "Reset password: Confirm reset by providing the valid token and new password": {
            "url": "/api/v1/en-US/auth/reset-password/confirm",
            "post": {
                "token": "a-valid-reset-code-token",
                "password": "new password"
            }
        },

        "Change password": {
            "url": "/api/v1/en-US/auth/change-password",
            "post": {
                "username": "some user email",
                "currentPassword": "sshhh..",
                "newPassword": "...is a secret"
            }
        },

        "Payment plan (get active plan and create first one)": {
            "url": "/api/v1/en-US/me/payment-plan",
            "get": {},
            "post": {
                "paymentPlan": "MonthlyLite",
                "paymentMethod": {
                    "paymentMethodID": "TEST: previously saved method token",
                    "cardNumber": "123443121234",
                    "nameOnCard": "Me",
                    "expirationMonth": "11",
                    "expirationYear": "2018",
                    "securityCode": "123"
                }
            }
        },
        "Payment plan: user history": {
            "url": "/api/v1/en-US/me/payment-plan/history",
            "get": {}
        },
        "Owner Acknowledgment (get and set)": {
            "url": "/api/v1/en-US/me/owner-acknowledgment",
            "get": { },
            "post": {
                "ownerFullName": "FirstName LastName as in user account"
            }
        },

        "User Fee Payments": {
            "url": "/api/v1/en-US/me/fee-payments",
            "get": {}
        },

        "Lead Generation: subscribe to newsletter": {
            "url": "/api/v1/en-US/lead-generation/newsletter/subscribe",
            "post": {
                "email": "user@test.one",
                "isServiceProfessional": true
            }
        },
        "Lead Generation: subscribe to provide referrals": {
            "url": "/api/v1/en-US/lead-generation/referral/subscribe",
            "post": {
                "email": "user@test.one",
                "isServiceProfessional": true
            },
            "put": {
                "userID": 123,
                "email": "user@test.one",
                "firstName": "User",
                "lastName": "Test"
            }
        },
        "Lead Generation: refer a professional": {
            "url": "/api/v1/en-US/lead-generation/referral/refer",
            "post": {
                "email": "service@professional.test",
                "firstName": "Service",
                "lastname": "Professional",
                "phone": "123456789",
                "referredByUserID": 123,
                "referredByEmail": "user@test.one"
            }
        },
        "Platforms (available to me)": {
            "url": "/api/v1/en-US/me/platforms",
            "get": { }
        },
        "Platforms (item, available to me)": {
            "url": "/api/v1/en-US/me/platforms/1",
            "get": { }
        },
        "User External Listings": {
            "url": "/api/v1/en-US/me/external-listings",
            "get": {},
            "post": {
                "platformID": 1,
                "jobTitles": [106],
                "title": "My listing at LC",
                "notes": "Something public about me"
            }
        },
        "User External Listing (item)": {
            "url": "/api/v1/en-US/me/external-listings/1",
            "get": {},
            "put": {
                "jobTitles": [106],
                "title": "My listing at LC",
                "notes": "Something public about me"
            },
            "delete": {}
        },
        "Earnings (list and create)": {
            "url": "/api/v1/en-US/me/earnings",
            "get": {
                "limit": 40,
                "untilID": null,
                "sinceID": null
            },
            "post": {
                "paidDate": "2018-02-09T10:00:00Z",
                "durationMinutes": 120,
                "userExternalListingID": 1,
                "jobTitleID": 106,
                "clientUserID": 141,
                "amount": 120.40,
                "notes": "Something else"
            }
        },
        "Earnings entry (udpate and delete": {
            "url": "/api/v1/en-US/me/earnings/123",
            "get": { },
            "put": {
                "paidDate": "2018-02-09T10:00:00Z",
                "durationMinutes": 120,
                "userExternalListingID": 1,
                "jobTitleID": 106,
                "clientUserID": 141,
                "amount": 120.40,
                "notes": "Something else"
            },
            "delete": { }
        },
        "Earnings Report (queries)": {
            "url": "/api/v1/en-US/me/earnings/report",
            "get": {
                "fromDate": "2018-01-01 00:00:00+0100",
                "toDate": "2019-01-01 00:00:00+0100",
                "jobTitleID": null,
                "userExternalListingID": null
            }
        },
        "Earnings Report: all CCC students (only CCC admin), or CCC college for collegeAdmin (institutionID is automatic for them)": {
            "url": "/api/v1/en-US/me/earnings/report/ccc",
            "get": {
                "fromDate": "2018-01-01 00:00:00+0100",
                "toDate": "2019-01-01 00:00:00+0100",
                "jobTitleID": null,
                "userExternalListingID": null,
                "institutionID": null
            }
        },
        "Earnings Report: in CSV format": {
            "url": "/api/v1/en-US/me/earnings/report/ccc/csv",
            "get": {
                "fromDate": "2018-01-01 00:00:00+0100",
                "toDate": "2019-01-01 00:00:00+0100",
                "jobTitleID": null,
                "userExternalListingID": null,
                "institutionID": null
            }
        },
        "Earnings Report: Detailed Admin Report": {
            "url": "/api/v1/en-US/me/earnings/detailed-report/ccc",
                "get": {
                "fromDate": "2018-01-01 00:00:00+0100",
                    "toDate": "2019-01-01 00:00:00+0100",
                        "jobTitleID": null,
                            "userExternalListingID": null,
                                "institutionID": null
            }
        },
        "Earnings Report: Detailed Admin Report (in CSV format)": {
            "url": "/api/v1/en-US/me/earnings/detailed-report/ccc/csv",
                "get": {
                "fromDate": "2018-01-01 00:00:00+0100",
                    "toDate": "2019-01-01 00:00:00+0100",
                        "jobTitleID": null,
                            "userExternalListingID": null,
                                "institutionID": null
            }
        },
        "Badges (create)": {
            "url": "/api/v1/en-US/me/badges",
            "post": {
                "solutionID": 1,
                "badgeURL": "https://api.badgr.io/public/assertions/ZwxV7sqTTqa-r_vK51VsdA.json?v=2_0",
                "type": "badge"
            }
        },
        "Badges (udpate and delete": {
            "url": "/api/v1/en-US/me/badges/123",
            "get": {},
            "put": {
                "solutionID": 1,
                "badgeURL": "https://api.badgr.io/public/assertions/ZwxV7sqTTqa-r_vK51VsdA.json?v=2_0",
                "type": "badge"
            },
            "delete": {}
        },
        "Badges by listing": {
            "url": "/api/v1/en-US/me/badges/by-listing/123",
            "get": {}
        },
        "Badges by solution": {
            "url": "/api/v1/en-US/me/badges/by-solution/123",
            "get": {}
        },
        "Admin user badges (list and create)": {
            "url": "/api/v1/en-US/admin/users/141",
            "get": {},
            "post": {
                "badgeURL": "https://badgr.io/assertions/asdf?v=2",
                "type": "badge",
                "category": "general",
                "solutionID": null,
                "expiryDate": "2020-01-01T01:01:01Z"
            }
        },
        "Admin user badges (item by userBadgeID)": {
            "url": "/api/v1/en-US/admin/users/141/2",
            "get": {},
            "put": {
                "badgeURL": "https://badgr.io/assertions/asdf?v=2",
                "type": "badge",
                "category": "general",
                "solutionID": null,
                "expiryDate": "2020-01-01T01:01:01Z"
            }
        },
        "Solutions search": {
            "url": "/api/v1/en-US/solutions",
            "get": {
                "searchTerm": "wedding"
            }
        },
        "Solutions - Get item": {
            "url": "/api/v1/en-US/solutions/1",
            "get": {}
        },
        "Solutions - By Search SubCategory": {
            "url": "/api/v1/en-US/solutions/search-subcategory/1",
            "get": {}
        },
        "Solutions by user listing": {
            "url": "/api/v1/en-US/me/solutions/listing/1",
            "get": { },
            "put": {
                "solutions": [1,2,5,3]
            }
        },
        "Solutions - By Job Title": {
            "url": "/api/v1/en-US/solutions/job-title/106",
            "get": { }
        },
        "GIG Postings made by the user (or create one)": {
            "url": "/api/v1/en-US/me/postings",
            "get": {},
            "post": {
                "solutionID": 1,
                "title": "Concise work description",
                "neededSpecializationIDs": [1, 20, 5],
                "proposedNeededSpecializations": ["Some new specialization", "that doesn't exists still"],
                "desiredSpecializationIDs": [2, 4],
                "proposedDesiredSpecializations": ["This would be great to have"],
                "questionsResponses": "[{\"questionID\":1,\"questionTypeID\":1,\"question\":\"Where+are+you+in+the+lifecycle+of+the+project?\",\"helpBlock\":null,\"options\":[{\"optionID\":1,\"option\":\"I+have+designs\",\"icon\":null,\"tooltip\":null,\"placeholder\":null,\"inputType\":null,\"step\":null},{\"optionID\":2,\"option\":\"I+have+specifications\",\"icon\":null,\"tooltip\":null,\"placeholder\":null,\"inputType\":null,\"step\":null},{\"optionID\":3,\"option\":\"I+have+ideas\",\"icon\":null,\"tooltip\":null,\"placeholder\":null,\"inputType\":null,\"step\":null},{\"optionID\":4,\"option\":\"I'm+just+starting\",\"icon\":null,\"tooltip\":null,\"placeholder\":null,\"inputType\":null,\"step\":null},{\"optionID\":5,\"option\":\"Other\",\"icon\":null,\"tooltip\":null,\"placeholder\":null,\"inputType\":\"text\",\"step\":null}],\"responses\":[{\"optionID\":2,\"option\":\"I+have+specifications\",\"userInput\":null}],\"legend\":\"General+Project+Info\",\"branchLogic\":{}}]"
            }
        },
        "GIG Posting made by the user (fetch, update, delete)": {
            "url": "/api/v1/en-US/me/postings/1",
            "get": {},
            "put": {
                "title": "Concise work description",
                "neededSpecializationIDs": [1, 20, 5],
                "proposedNeededSpecializations": ["Some new specialization", "that doesn't exists still"],
                "desiredSpecializationIDs": [2, 4],
                "proposedDesiredSpecializations": ["This would be great to have"],
                "questionsResponses": "[{\"questionID\":1,\"questionTypeID\":1,\"question\":\"Where+are+you+in+the+lifecycle+of+the+project?\",\"helpBlock\":null,\"options\":[{\"optionID\":1,\"option\":\"I+have+designs\",\"icon\":null,\"tooltip\":null,\"placeholder\":null,\"inputType\":null,\"step\":null},{\"optionID\":2,\"option\":\"I+have+specifications\",\"icon\":null,\"tooltip\":null,\"placeholder\":null,\"inputType\":null,\"step\":null},{\"optionID\":3,\"option\":\"I+have+ideas\",\"icon\":null,\"tooltip\":null,\"placeholder\":null,\"inputType\":null,\"step\":null},{\"optionID\":4,\"option\":\"I'm+just+starting\",\"icon\":null,\"tooltip\":null,\"placeholder\":null,\"inputType\":null,\"step\":null},{\"optionID\":5,\"option\":\"Other\",\"icon\":null,\"tooltip\":null,\"placeholder\":null,\"inputType\":\"text\",\"step\":null}],\"responses\":[{\"optionID\":2,\"option\":\"I+have+specifications\",\"userInput\":null}],\"legend\":\"General+Project+Info\",\"branchLogic\":{}}]"
            },
            "delete": {}
        },
        "GIG Posting: close posting made by the user": {
            "url": "/api/v1/en-US/me/postings/1/close",
            "post": { }
        },
        "GIG Postings suggested to an user": {
            "url": "/api/v1/en-US/me/postings/suggested",
            "get": {}
        },
        "GIG Postings suggested to an user: apply to one": {
            "url": "/api/v1/en-US/me/postings/suggested/1/apply",
            "post": {
                "message": "I'm available!'"
            }
        },
        "GIG Postings suggested to an user: discard one (hide)": {
            "url": "/api/v1/en-US/me/postings/suggested/1/discard",
            "post": {}
        },
        "Specializations search (autocomplete)": {
            "url": "/api/v1/en-US/specializations",
            "get": {
                "searchTerm": "cleaning",
                "solutionID": 153
            }
        },
        "Posting Templates - Get item": {
            "url": "/api/v1/en-US/posting-templates/1",
            "get": {}
        },
        "Platforms (all registered)": {
            "url": "/api/v1/en-US/platforms",
            "get": {}
        },
        "Admin: List Partner Users": {
            "url": "/api/v1/en-US/admin/partner-users/ccc",
            "get": {}
        }
    };

</script>
<script type="text/javascript">

    function useApi(name, method) {
        var api = REST_API[name],
            data = api[method];
        if (api) {
            $('[name=url]').val(api.url);
            $('[name=rawdata]').val(JSON.stringify(data, null, 4));
        }
    }

    function showApiList() {
        var $l = $('#apiList');
        Object.keys(REST_API).forEach(function (name) {

            var $li = $('<li/>')
                .text(name + ':')
                .appendTo($l);

            ['all', 'get', 'post', 'put', 'delete'].forEach(function (method) {

                if (REST_API[name][method]) {
                    $('<span/>')
                        .text(method)
                        .on('click', function () {
                            useApi(name, method);
                        })
                        .appendTo($li);
                }
            });
        });
    }

    /// http://stackoverflow.com/questions/4810841/how-can-i-pretty-print-json-using-javascript
    function syntaxHighlight(json) {
        if (typeof json != 'string') {
            json = JSON.stringify(json, undefined, 2);
        }
        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            var cls = 'number';
            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    cls = 'key';
                } else {
                    cls = 'string';
                }
            } else if (/true|false/.test(match)) {
                cls = 'boolean';
            } else if (/null/.test(match)) {
                cls = 'null';
            }
            return '<span class="' + cls + '">' + match + '</span>';
        });
    }

    jQuery(function ($) {

        showApiList();

        $log = $('#log');
        $resultStatus = $('#resultStatus');
        $formattedLog = $('#formattedLog');

        function doRequest(type, url, data) {

            try {

                type = type && type.toUpperCase();
                data = data && data.replace(/^\s+/, '') && JSON.parse(data);
                $('body').addClass('is-loading');

                $.ajax({
                    url: (LcUrl.AppPath + url).replace(/\/{2}/g, '/'),
                    type: type,
                    data: data,
                    //data: JSON.stringify(data),
                    //contentType: 'application/json'
                }).then(
                    function (d, status, xhr) {
                        console.log('OK   ', d);
                        var formattedResult = xhr.responseText;
                        try {
                            formattedResult = JSON.stringify(JSON.parse(xhr.responseText), null, 4);
                            $formattedLog.html(syntaxHighlight(formattedResult));
                        } catch (ex) {
                            $formattedLog.text(formattedResult);
                        }

                        $log.text(formattedResult);
                        $resultStatus.text('OK    ' + xhr.status + ':' + xhr.statusText);
                    }, function (err) {

                        var msg = err.responseText;
                        try {
                            msg = JSON.parse(err.responseText);
                        } catch (ex) { }

                        console.log('ERROR', msg);
                        $resultStatus.text('ERROR ' + err.status + ':' + err.statusText);

                        var formattedResult = err.responseText;
                        try {
                            formattedResult = JSON.stringify(JSON.parse(err.responseText), null, 4);
                            $formattedLog.html(syntaxHighlight(formattedResult));
                        } catch (ex) {
                            $formattedLog.text(formattedResult);
                        }

                        $log.text(formattedResult);
                    }
                    ).always(function () {
                        $('body').removeClass('is-loading');
                    });

            } catch (ex) {
                $('body').removeClass('is-loading');
                var errmsg = 'REQUEST ERROR, See console log.\n' + (ex && ex.toString());
                $log.text(errmsg);
                $formattedLog.text(errmsg);
                console.error('doRequest', ex);
            }
        }

        $('form [data-method]').on('click', function () {
            doRequest($(this).data('method'), $('[name=url]').val(), $('[name=rawdata]').val());
            return false;
        });
        $('form').on('submit', function () {
            doRequest('GET', $('[name=url]').val(), $('[name=rawdata]').val());
            return false;
        });

        $('#switchResult').on('click', function () {
            var formatVisible = !$formattedLog.is('[hidden]');
            if (formatVisible) {
                $formattedLog.attr('hidden', 'hidden');
                $log.removeAttr('hidden');
            }
            else {
                $formattedLog.removeAttr('hidden');
                $log.attr('hidden', 'hidden');
            }
        });

    });
</script>
<style>
    input, textarea {
        box-sizing: border-box !important;
        -moz-box-sizing: border-box !important;
        -webkit-box-sizing: border-box !important;
        width: 100% !important;
    }
    #log,
    #formattedLog {
        max-height: 400px;
        overflow: auto;
    }
    #apiList {
        padding-bottom: 40px;
    }
    #apiList li span {
        margin-left: 1em;
        cursor: pointer;
        text-decoration: underline;
        color: Blue;
    }
    .loading-spinner {
        opacity: 0;
        transition: opacity 1s;
    }
    .is-loading .loading-spinner {
        opacity: 1;
    }
    
    #testrest label 
    {
        display: block;
        font-weight: normal;
    }
    
    #url 
    {
        color: #D23131;
    }
    #rawdata 
    {
        color: rgb(13, 119, 36)
    }
    
    .string { color: #A52A2A; }
    .number { color: #1D8374; }
    .boolean { color: #337000; }
    .null { color: #DA2EDA; }
    .key { color: #00b; }
</style>
<div id="testrest">
    <form>
        <label>REST API URL (for example /en-US/REST/Test) <input type="text" id="url" name="url" value="/api/v1/en-US/Test" /></label>
        <div>
            <!-- Some example data as JSON -->
            <label>Request raw data as JSON
            <textarea name="rawdata" id="rawdata" rows="7">
{
"name": "Mine"
}
            </textarea>
            </label>
        </div>
        <div class="actions">
            <img class="loading-spinner" src="@(LcUrl.AppPath)img/theme/loading.gif" alt="Loading..." />
            <button type="button" class="action" data-method="GET">GET</button>
            <button type="button" class="action" data-method="POST">POST</button>
            <button type="button" class="action" data-method="PUT">PUT</button>
            <button type="button" class="action" data-method="DELETE">DELETE</button>
        </div>
    </form>
    <h3>Task result (it's too at the browser web console):</h3><button type="button" id="switchResult">Switch syntax highlighting</button>
    <pre id="resultStatus"></pre>
    <pre id="log" hidden="hidden"></pre>
    <pre id="formattedLog"></pre>
    <h3>REST API examples</h3>
    <ul id="apiList"></ul>
</div>